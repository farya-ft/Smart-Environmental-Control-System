
BMP180LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004584  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004754  08004754  00005754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047d0  080047d0  0000606c  2**0
                  CONTENTS
  4 .ARM          00000008  080047d0  080047d0  000057d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047d8  080047d8  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047d8  080047d8  000057d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047dc  080047dc  000057dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080047e0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  2000006c  0800484c  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  0800484c  000062e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c065  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001db1  00000000  00000000  00012101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  00013eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000088e  00000000  00000000  000149b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021fa1  00000000  00000000  00015246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e82e  00000000  00000000  000371e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb77d  00000000  00000000  00045a15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00111192  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003204  00000000  00000000  001111d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001143dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800473c 	.word	0x0800473c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	0800473c 	.word	0x0800473c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <BMP180_Init>:

/**
 * @brief Initializes the BMP180 temperature/pressure sensor.
 * @param hi2c User I2C handle pointer.
 */
void BMP180_Init(I2C_HandleTypeDef *hi2c) {
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	_bmp180_ui2c = hi2c;
 80005b8:	4a04      	ldr	r2, [pc, #16]	@ (80005cc <BMP180_Init+0x1c>)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	6013      	str	r3, [r2, #0]
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000088 	.word	0x20000088

080005d0 <BMP180_SetOversampling>:
/**
 * @param oss Enum, oversampling setting.
 * @note Available resolutions: BMP180_LOW, BMP180_STANDARD, BMP180_HIGH, BMP180_ULTRA.
 * @note Refer to section 3.3.1 of datasheet.
 */
void BMP180_SetOversampling(BMP180_OSS oss) {
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
	_bmp180_oss = oss;
 80005da:	4a04      	ldr	r2, [pc, #16]	@ (80005ec <BMP180_SetOversampling+0x1c>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	7013      	strb	r3, [r2, #0]
}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	200000a2 	.word	0x200000a2

080005f0 <BMP180_UpdateCalibrationData>:

/**
 * @brief Updates calibration data.
 * @note Must be called once before main loop.
 */
void BMP180_UpdateCalibrationData(void) {
 80005f0:	b598      	push	{r3, r4, r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	_bmp180_eeprom.BMP180_AC1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC1]);
 80005f4:	23aa      	movs	r3, #170	@ 0xaa
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f8dc 	bl	80007b4 <BMP180_ReadReg>
 80005fc:	4603      	mov	r3, r0
 80005fe:	021b      	lsls	r3, r3, #8
 8000600:	b21c      	sxth	r4, r3
 8000602:	23ab      	movs	r3, #171	@ 0xab
 8000604:	4618      	mov	r0, r3
 8000606:	f000 f8d5 	bl	80007b4 <BMP180_ReadReg>
 800060a:	4603      	mov	r3, r0
 800060c:	b21b      	sxth	r3, r3
 800060e:	4323      	orrs	r3, r4
 8000610:	b21a      	sxth	r2, r3
 8000612:	4b58      	ldr	r3, [pc, #352]	@ (8000774 <BMP180_UpdateCalibrationData+0x184>)
 8000614:	801a      	strh	r2, [r3, #0]
	_bmp180_eeprom.BMP180_AC2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC2]);
 8000616:	23ac      	movs	r3, #172	@ 0xac
 8000618:	4618      	mov	r0, r3
 800061a:	f000 f8cb 	bl	80007b4 <BMP180_ReadReg>
 800061e:	4603      	mov	r3, r0
 8000620:	021b      	lsls	r3, r3, #8
 8000622:	b21c      	sxth	r4, r3
 8000624:	23ad      	movs	r3, #173	@ 0xad
 8000626:	4618      	mov	r0, r3
 8000628:	f000 f8c4 	bl	80007b4 <BMP180_ReadReg>
 800062c:	4603      	mov	r3, r0
 800062e:	b21b      	sxth	r3, r3
 8000630:	4323      	orrs	r3, r4
 8000632:	b21a      	sxth	r2, r3
 8000634:	4b4f      	ldr	r3, [pc, #316]	@ (8000774 <BMP180_UpdateCalibrationData+0x184>)
 8000636:	805a      	strh	r2, [r3, #2]
	_bmp180_eeprom.BMP180_AC3 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC3]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC3]);
 8000638:	23ae      	movs	r3, #174	@ 0xae
 800063a:	4618      	mov	r0, r3
 800063c:	f000 f8ba 	bl	80007b4 <BMP180_ReadReg>
 8000640:	4603      	mov	r3, r0
 8000642:	021b      	lsls	r3, r3, #8
 8000644:	b21c      	sxth	r4, r3
 8000646:	23af      	movs	r3, #175	@ 0xaf
 8000648:	4618      	mov	r0, r3
 800064a:	f000 f8b3 	bl	80007b4 <BMP180_ReadReg>
 800064e:	4603      	mov	r3, r0
 8000650:	b21b      	sxth	r3, r3
 8000652:	4323      	orrs	r3, r4
 8000654:	b21a      	sxth	r2, r3
 8000656:	4b47      	ldr	r3, [pc, #284]	@ (8000774 <BMP180_UpdateCalibrationData+0x184>)
 8000658:	809a      	strh	r2, [r3, #4]
	_bmp180_eeprom.BMP180_AC4 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC4]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC4]);
 800065a:	23b0      	movs	r3, #176	@ 0xb0
 800065c:	4618      	mov	r0, r3
 800065e:	f000 f8a9 	bl	80007b4 <BMP180_ReadReg>
 8000662:	4603      	mov	r3, r0
 8000664:	021b      	lsls	r3, r3, #8
 8000666:	b21c      	sxth	r4, r3
 8000668:	23b1      	movs	r3, #177	@ 0xb1
 800066a:	4618      	mov	r0, r3
 800066c:	f000 f8a2 	bl	80007b4 <BMP180_ReadReg>
 8000670:	4603      	mov	r3, r0
 8000672:	b21b      	sxth	r3, r3
 8000674:	4323      	orrs	r3, r4
 8000676:	b21b      	sxth	r3, r3
 8000678:	b29a      	uxth	r2, r3
 800067a:	4b3e      	ldr	r3, [pc, #248]	@ (8000774 <BMP180_UpdateCalibrationData+0x184>)
 800067c:	80da      	strh	r2, [r3, #6]
	_bmp180_eeprom.BMP180_AC5 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC5]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC5]);
 800067e:	23b2      	movs	r3, #178	@ 0xb2
 8000680:	4618      	mov	r0, r3
 8000682:	f000 f897 	bl	80007b4 <BMP180_ReadReg>
 8000686:	4603      	mov	r3, r0
 8000688:	021b      	lsls	r3, r3, #8
 800068a:	b21c      	sxth	r4, r3
 800068c:	23b3      	movs	r3, #179	@ 0xb3
 800068e:	4618      	mov	r0, r3
 8000690:	f000 f890 	bl	80007b4 <BMP180_ReadReg>
 8000694:	4603      	mov	r3, r0
 8000696:	b21b      	sxth	r3, r3
 8000698:	4323      	orrs	r3, r4
 800069a:	b21b      	sxth	r3, r3
 800069c:	b29a      	uxth	r2, r3
 800069e:	4b35      	ldr	r3, [pc, #212]	@ (8000774 <BMP180_UpdateCalibrationData+0x184>)
 80006a0:	811a      	strh	r2, [r3, #8]
	_bmp180_eeprom.BMP180_AC6 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC6]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC6]);
 80006a2:	23b4      	movs	r3, #180	@ 0xb4
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 f885 	bl	80007b4 <BMP180_ReadReg>
 80006aa:	4603      	mov	r3, r0
 80006ac:	021b      	lsls	r3, r3, #8
 80006ae:	b21c      	sxth	r4, r3
 80006b0:	23b5      	movs	r3, #181	@ 0xb5
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 f87e 	bl	80007b4 <BMP180_ReadReg>
 80006b8:	4603      	mov	r3, r0
 80006ba:	b21b      	sxth	r3, r3
 80006bc:	4323      	orrs	r3, r4
 80006be:	b21b      	sxth	r3, r3
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000774 <BMP180_UpdateCalibrationData+0x184>)
 80006c4:	815a      	strh	r2, [r3, #10]
	_bmp180_eeprom.BMP180_B1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B1]);
 80006c6:	23b6      	movs	r3, #182	@ 0xb6
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 f873 	bl	80007b4 <BMP180_ReadReg>
 80006ce:	4603      	mov	r3, r0
 80006d0:	021b      	lsls	r3, r3, #8
 80006d2:	b21c      	sxth	r4, r3
 80006d4:	23b7      	movs	r3, #183	@ 0xb7
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 f86c 	bl	80007b4 <BMP180_ReadReg>
 80006dc:	4603      	mov	r3, r0
 80006de:	b21b      	sxth	r3, r3
 80006e0:	4323      	orrs	r3, r4
 80006e2:	b21a      	sxth	r2, r3
 80006e4:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <BMP180_UpdateCalibrationData+0x184>)
 80006e6:	819a      	strh	r2, [r3, #12]
	_bmp180_eeprom.BMP180_B2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B2]);
 80006e8:	23b8      	movs	r3, #184	@ 0xb8
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 f862 	bl	80007b4 <BMP180_ReadReg>
 80006f0:	4603      	mov	r3, r0
 80006f2:	021b      	lsls	r3, r3, #8
 80006f4:	b21c      	sxth	r4, r3
 80006f6:	23b9      	movs	r3, #185	@ 0xb9
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 f85b 	bl	80007b4 <BMP180_ReadReg>
 80006fe:	4603      	mov	r3, r0
 8000700:	b21b      	sxth	r3, r3
 8000702:	4323      	orrs	r3, r4
 8000704:	b21a      	sxth	r2, r3
 8000706:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <BMP180_UpdateCalibrationData+0x184>)
 8000708:	81da      	strh	r2, [r3, #14]
	_bmp180_eeprom.BMP180_MB = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MB]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MB]);
 800070a:	23ba      	movs	r3, #186	@ 0xba
 800070c:	4618      	mov	r0, r3
 800070e:	f000 f851 	bl	80007b4 <BMP180_ReadReg>
 8000712:	4603      	mov	r3, r0
 8000714:	021b      	lsls	r3, r3, #8
 8000716:	b21c      	sxth	r4, r3
 8000718:	23bb      	movs	r3, #187	@ 0xbb
 800071a:	4618      	mov	r0, r3
 800071c:	f000 f84a 	bl	80007b4 <BMP180_ReadReg>
 8000720:	4603      	mov	r3, r0
 8000722:	b21b      	sxth	r3, r3
 8000724:	4323      	orrs	r3, r4
 8000726:	b21a      	sxth	r2, r3
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <BMP180_UpdateCalibrationData+0x184>)
 800072a:	821a      	strh	r2, [r3, #16]
	_bmp180_eeprom.BMP180_MC = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MC]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MC]);
 800072c:	23bc      	movs	r3, #188	@ 0xbc
 800072e:	4618      	mov	r0, r3
 8000730:	f000 f840 	bl	80007b4 <BMP180_ReadReg>
 8000734:	4603      	mov	r3, r0
 8000736:	021b      	lsls	r3, r3, #8
 8000738:	b21c      	sxth	r4, r3
 800073a:	23bd      	movs	r3, #189	@ 0xbd
 800073c:	4618      	mov	r0, r3
 800073e:	f000 f839 	bl	80007b4 <BMP180_ReadReg>
 8000742:	4603      	mov	r3, r0
 8000744:	b21b      	sxth	r3, r3
 8000746:	4323      	orrs	r3, r4
 8000748:	b21a      	sxth	r2, r3
 800074a:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <BMP180_UpdateCalibrationData+0x184>)
 800074c:	825a      	strh	r2, [r3, #18]
	_bmp180_eeprom.BMP180_MD = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MD]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MD]);
 800074e:	23be      	movs	r3, #190	@ 0xbe
 8000750:	4618      	mov	r0, r3
 8000752:	f000 f82f 	bl	80007b4 <BMP180_ReadReg>
 8000756:	4603      	mov	r3, r0
 8000758:	021b      	lsls	r3, r3, #8
 800075a:	b21c      	sxth	r4, r3
 800075c:	23bf      	movs	r3, #191	@ 0xbf
 800075e:	4618      	mov	r0, r3
 8000760:	f000 f828 	bl	80007b4 <BMP180_ReadReg>
 8000764:	4603      	mov	r3, r0
 8000766:	b21b      	sxth	r3, r3
 8000768:	4323      	orrs	r3, r4
 800076a:	b21a      	sxth	r2, r3
 800076c:	4b01      	ldr	r3, [pc, #4]	@ (8000774 <BMP180_UpdateCalibrationData+0x184>)
 800076e:	829a      	strh	r2, [r3, #20]
}
 8000770:	bf00      	nop
 8000772:	bd98      	pop	{r3, r4, r7, pc}
 8000774:	2000008c 	.word	0x2000008c

08000778 <BMP180_WriteReg>:
/**
 * @brief Writes to a specific register.
 * @param reg Address of register to write to.
 * @param cmd Byte to write.
 */
void BMP180_WriteReg(uint8_t reg, uint8_t cmd) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af02      	add	r7, sp, #8
 800077e:	4603      	mov	r3, r0
 8000780:	460a      	mov	r2, r1
 8000782:	71fb      	strb	r3, [r7, #7]
 8000784:	4613      	mov	r3, r2
 8000786:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	733b      	strb	r3, [r7, #12]
 800078c:	79bb      	ldrb	r3, [r7, #6]
 800078e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, arr, 2, BMP180_I2C_TIMEOUT);
 8000790:	4b07      	ldr	r3, [pc, #28]	@ (80007b0 <BMP180_WriteReg+0x38>)
 8000792:	6818      	ldr	r0, [r3, #0]
 8000794:	f107 020c 	add.w	r2, r7, #12
 8000798:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	2302      	movs	r3, #2
 80007a0:	21ee      	movs	r1, #238	@ 0xee
 80007a2:	f001 fa81 	bl	8001ca8 <HAL_I2C_Master_Transmit>
}
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000088 	.word	0x20000088

080007b4 <BMP180_ReadReg>:
/**
 * @brief Reads from a specific register.
 * @param reg Address of register to read from.
 * @return Byte read.
 */
uint8_t BMP180_ReadReg(uint8_t reg) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af02      	add	r7, sp, #8
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 80007be:	4b0d      	ldr	r3, [pc, #52]	@ (80007f4 <BMP180_ReadReg+0x40>)
 80007c0:	6818      	ldr	r0, [r3, #0]
 80007c2:	1dfa      	adds	r2, r7, #7
 80007c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	2301      	movs	r3, #1
 80007cc:	21ee      	movs	r1, #238	@ 0xee
 80007ce:	f001 fa6b 	bl	8001ca8 <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 80007d2:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <BMP180_ReadReg+0x40>)
 80007d4:	6818      	ldr	r0, [r3, #0]
 80007d6:	f107 020f 	add.w	r2, r7, #15
 80007da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	2301      	movs	r3, #1
 80007e2:	21ee      	movs	r1, #238	@ 0xee
 80007e4:	f001 fb5e 	bl	8001ea4 <HAL_I2C_Master_Receive>
	return result;
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000088 	.word	0x20000088

080007f8 <BMP180_GetRawTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in 0.1 (1/10) degrees Celsius.
 */
int32_t BMP180_GetRawTemperature(void) {
 80007f8:	b590      	push	{r4, r7, lr}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 80007fe:	232e      	movs	r3, #46	@ 0x2e
 8000800:	4619      	mov	r1, r3
 8000802:	20f4      	movs	r0, #244	@ 0xf4
 8000804:	f7ff ffb8 	bl	8000778 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 8000808:	2305      	movs	r3, #5
 800080a:	4618      	mov	r0, r3
 800080c:	f000 fe50 	bl	80014b0 <HAL_Delay>
	int32_t ut = (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 8000810:	20f6      	movs	r0, #246	@ 0xf6
 8000812:	f7ff ffcf 	bl	80007b4 <BMP180_ReadReg>
 8000816:	4603      	mov	r3, r0
 8000818:	021c      	lsls	r4, r3, #8
 800081a:	20f7      	movs	r0, #247	@ 0xf7
 800081c:	f7ff ffca 	bl	80007b4 <BMP180_ReadReg>
 8000820:	4603      	mov	r3, r0
 8000822:	4323      	orrs	r3, r4
 8000824:	60fb      	str	r3, [r7, #12]
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 8000826:	4b15      	ldr	r3, [pc, #84]	@ (800087c <BMP180_GetRawTemperature+0x84>)
 8000828:	895b      	ldrh	r3, [r3, #10]
 800082a:	461a      	mov	r2, r3
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	1a9b      	subs	r3, r3, r2
 8000830:	4a12      	ldr	r2, [pc, #72]	@ (800087c <BMP180_GetRawTemperature+0x84>)
 8000832:	8912      	ldrh	r2, [r2, #8]
 8000834:	fb02 f303 	mul.w	r3, r2, r3
 8000838:	2b00      	cmp	r3, #0
 800083a:	da02      	bge.n	8000842 <BMP180_GetRawTemperature+0x4a>
 800083c:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8000840:	337f      	adds	r3, #127	@ 0x7f
 8000842:	13db      	asrs	r3, r3, #15
 8000844:	60bb      	str	r3, [r7, #8]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 8000846:	4b0d      	ldr	r3, [pc, #52]	@ (800087c <BMP180_GetRawTemperature+0x84>)
 8000848:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800084c:	02da      	lsls	r2, r3, #11
 800084e:	4b0b      	ldr	r3, [pc, #44]	@ (800087c <BMP180_GetRawTemperature+0x84>)
 8000850:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000854:	4619      	mov	r1, r3
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	440b      	add	r3, r1
 800085a:	fb92 f3f3 	sdiv	r3, r2, r3
 800085e:	607b      	str	r3, [r7, #4]
	int32_t b5 = x1 + x2;
 8000860:	68ba      	ldr	r2, [r7, #8]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4413      	add	r3, r2
 8000866:	603b      	str	r3, [r7, #0]
	return (b5 + 8) / (1 << 4);
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	3308      	adds	r3, #8
 800086c:	2b00      	cmp	r3, #0
 800086e:	da00      	bge.n	8000872 <BMP180_GetRawTemperature+0x7a>
 8000870:	330f      	adds	r3, #15
 8000872:	111b      	asrs	r3, r3, #4
}
 8000874:	4618      	mov	r0, r3
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	bd90      	pop	{r4, r7, pc}
 800087c:	2000008c 	.word	0x2000008c

08000880 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800088a:	4a38      	ldr	r2, [pc, #224]	@ (800096c <HD44780_Init+0xec>)
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000890:	4b37      	ldr	r3, [pc, #220]	@ (8000970 <HD44780_Init+0xf0>)
 8000892:	2208      	movs	r2, #8
 8000894:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000896:	4b37      	ldr	r3, [pc, #220]	@ (8000974 <HD44780_Init+0xf4>)
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800089c:	4b33      	ldr	r3, [pc, #204]	@ (800096c <HD44780_Init+0xec>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d907      	bls.n	80008b4 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80008a4:	4b33      	ldr	r3, [pc, #204]	@ (8000974 <HD44780_Init+0xf4>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	f043 0308 	orr.w	r3, r3, #8
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	4b31      	ldr	r3, [pc, #196]	@ (8000974 <HD44780_Init+0xf4>)
 80008b0:	701a      	strb	r2, [r3, #0]
 80008b2:	e006      	b.n	80008c2 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80008b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000974 <HD44780_Init+0xf4>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4b2d      	ldr	r3, [pc, #180]	@ (8000974 <HD44780_Init+0xf4>)
 80008c0:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80008c2:	f000 f985 	bl	8000bd0 <DelayInit>
  HAL_Delay(50);
 80008c6:	2032      	movs	r0, #50	@ 0x32
 80008c8:	f000 fdf2 	bl	80014b0 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80008cc:	4b28      	ldr	r3, [pc, #160]	@ (8000970 <HD44780_Init+0xf0>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 f943 	bl	8000b5c <ExpanderWrite>
  HAL_Delay(1000);
 80008d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008da:	f000 fde9 	bl	80014b0 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80008de:	2030      	movs	r0, #48	@ 0x30
 80008e0:	f000 f92b 	bl	8000b3a <Write4Bits>
  DelayUS(4500);
 80008e4:	f241 1094 	movw	r0, #4500	@ 0x1194
 80008e8:	f000 f99c 	bl	8000c24 <DelayUS>

  Write4Bits(0x03 << 4);
 80008ec:	2030      	movs	r0, #48	@ 0x30
 80008ee:	f000 f924 	bl	8000b3a <Write4Bits>
  DelayUS(4500);
 80008f2:	f241 1094 	movw	r0, #4500	@ 0x1194
 80008f6:	f000 f995 	bl	8000c24 <DelayUS>

  Write4Bits(0x03 << 4);
 80008fa:	2030      	movs	r0, #48	@ 0x30
 80008fc:	f000 f91d 	bl	8000b3a <Write4Bits>
  DelayUS(4500);
 8000900:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000904:	f000 f98e 	bl	8000c24 <DelayUS>

  Write4Bits(0x02 << 4);
 8000908:	2020      	movs	r0, #32
 800090a:	f000 f916 	bl	8000b3a <Write4Bits>
  DelayUS(100);
 800090e:	2064      	movs	r0, #100	@ 0x64
 8000910:	f000 f988 	bl	8000c24 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000914:	4b17      	ldr	r3, [pc, #92]	@ (8000974 <HD44780_Init+0xf4>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	f043 0320 	orr.w	r3, r3, #32
 800091c:	b2db      	uxtb	r3, r3
 800091e:	4618      	mov	r0, r3
 8000920:	f000 f8ce 	bl	8000ac0 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000924:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <HD44780_Init+0xf8>)
 8000926:	2204      	movs	r2, #4
 8000928:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800092a:	f000 f875 	bl	8000a18 <HD44780_Display>
  HD44780_Clear();
 800092e:	f000 f82b 	bl	8000988 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000932:	4b12      	ldr	r3, [pc, #72]	@ (800097c <HD44780_Init+0xfc>)
 8000934:	2202      	movs	r2, #2
 8000936:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000938:	4b10      	ldr	r3, [pc, #64]	@ (800097c <HD44780_Init+0xfc>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	b2db      	uxtb	r3, r3
 8000942:	4618      	mov	r0, r3
 8000944:	f000 f8bc 	bl	8000ac0 <SendCommand>
  DelayUS(4500);
 8000948:	f241 1094 	movw	r0, #4500	@ 0x1194
 800094c:	f000 f96a 	bl	8000c24 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000950:	490b      	ldr	r1, [pc, #44]	@ (8000980 <HD44780_Init+0x100>)
 8000952:	2000      	movs	r0, #0
 8000954:	f000 f876 	bl	8000a44 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000958:	490a      	ldr	r1, [pc, #40]	@ (8000984 <HD44780_Init+0x104>)
 800095a:	2001      	movs	r0, #1
 800095c:	f000 f872 	bl	8000a44 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000960:	f000 f81d 	bl	800099e <HD44780_Home>
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200000a6 	.word	0x200000a6
 8000970:	200000a7 	.word	0x200000a7
 8000974:	200000a3 	.word	0x200000a3
 8000978:	200000a4 	.word	0x200000a4
 800097c:	200000a5 	.word	0x200000a5
 8000980:	20000000 	.word	0x20000000
 8000984:	20000008 	.word	0x20000008

08000988 <HD44780_Clear>:

void HD44780_Clear()
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800098c:	2001      	movs	r0, #1
 800098e:	f000 f897 	bl	8000ac0 <SendCommand>
  DelayUS(2000);
 8000992:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000996:	f000 f945 	bl	8000c24 <DelayUS>
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}

0800099e <HD44780_Home>:

void HD44780_Home()
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80009a2:	2002      	movs	r0, #2
 80009a4:	f000 f88c 	bl	8000ac0 <SendCommand>
  DelayUS(2000);
 80009a8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009ac:	f000 f93a 	bl	8000c24 <DelayUS>
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b087      	sub	sp, #28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	460a      	mov	r2, r1
 80009be:	71fb      	strb	r3, [r7, #7]
 80009c0:	4613      	mov	r3, r2
 80009c2:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <HD44780_SetCursor+0x5c>)
 80009c6:	f107 0408 	add.w	r4, r7, #8
 80009ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80009d0:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <HD44780_SetCursor+0x60>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	79ba      	ldrb	r2, [r7, #6]
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d303      	bcc.n	80009e2 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80009da:	4b0e      	ldr	r3, [pc, #56]	@ (8000a14 <HD44780_SetCursor+0x60>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	3b01      	subs	r3, #1
 80009e0:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80009e2:	79bb      	ldrb	r3, [r7, #6]
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	3318      	adds	r3, #24
 80009e8:	443b      	add	r3, r7
 80009ea:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	4413      	add	r3, r2
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	b25b      	sxtb	r3, r3
 80009f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80009fc:	b25b      	sxtb	r3, r3
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	4618      	mov	r0, r3
 8000a02:	f000 f85d 	bl	8000ac0 <SendCommand>
}
 8000a06:	bf00      	nop
 8000a08:	371c      	adds	r7, #28
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd90      	pop	{r4, r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	08004754 	.word	0x08004754
 8000a14:	200000a6 	.word	0x200000a6

08000a18 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000a1c:	4b08      	ldr	r3, [pc, #32]	@ (8000a40 <HD44780_Display+0x28>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	f043 0304 	orr.w	r3, r3, #4
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <HD44780_Display+0x28>)
 8000a28:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000a2a:	4b05      	ldr	r3, [pc, #20]	@ (8000a40 <HD44780_Display+0x28>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	f043 0308 	orr.w	r3, r3, #8
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 f843 	bl	8000ac0 <SendCommand>
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200000a4 	.word	0x200000a4

08000a44 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	b25b      	sxtb	r3, r3
 8000a5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a62:	b25b      	sxtb	r3, r3
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 f82a 	bl	8000ac0 <SendCommand>
  for (int i=0; i<8; i++)
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	e009      	b.n	8000a86 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	683a      	ldr	r2, [r7, #0]
 8000a76:	4413      	add	r3, r2
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 f82e 	bl	8000adc <SendChar>
  for (int i=0; i<8; i++)
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	3301      	adds	r3, #1
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	2b07      	cmp	r3, #7
 8000a8a:	ddf2      	ble.n	8000a72 <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000a9e:	e006      	b.n	8000aae <HD44780_PrintStr+0x18>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	1c5a      	adds	r2, r3, #1
 8000aa4:	607a      	str	r2, [r7, #4]
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 f817 	bl	8000adc <SendChar>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d1f4      	bne.n	8000aa0 <HD44780_PrintStr+0xa>
}
 8000ab6:	bf00      	nop
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 f812 	bl	8000af8 <Send>
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <SendChar>:

static void SendChar(uint8_t ch)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	2101      	movs	r1, #1
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f804 	bl	8000af8 <Send>
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	460a      	mov	r2, r1
 8000b02:	71fb      	strb	r3, [r7, #7]
 8000b04:	4613      	mov	r3, r2
 8000b06:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	f023 030f 	bic.w	r3, r3, #15
 8000b0e:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	011b      	lsls	r3, r3, #4
 8000b14:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000b16:	7bfa      	ldrb	r2, [r7, #15]
 8000b18:	79bb      	ldrb	r3, [r7, #6]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 f80b 	bl	8000b3a <Write4Bits>
  Write4Bits((lownib)|mode);
 8000b24:	7bba      	ldrb	r2, [r7, #14]
 8000b26:	79bb      	ldrb	r3, [r7, #6]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f000 f804 	bl	8000b3a <Write4Bits>
}
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	4603      	mov	r3, r0
 8000b42:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 f808 	bl	8000b5c <ExpanderWrite>
  PulseEnable(value);
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 f820 	bl	8000b94 <PulseEnable>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af02      	add	r7, sp, #8
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000b66:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <ExpanderWrite+0x30>)
 8000b68:	781a      	ldrb	r2, [r3, #0]
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000b72:	f107 020f 	add.w	r2, r7, #15
 8000b76:	230a      	movs	r3, #10
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	214e      	movs	r1, #78	@ 0x4e
 8000b7e:	4804      	ldr	r0, [pc, #16]	@ (8000b90 <ExpanderWrite+0x34>)
 8000b80:	f001 f892 	bl	8001ca8 <HAL_I2C_Master_Transmit>
}
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	200000a7 	.word	0x200000a7
 8000b90:	200000a8 	.word	0x200000a8

08000b94 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff ffd8 	bl	8000b5c <ExpanderWrite>
  DelayUS(20);
 8000bac:	2014      	movs	r0, #20
 8000bae:	f000 f839 	bl	8000c24 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	f023 0304 	bic.w	r3, r3, #4
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff ffce 	bl	8000b5c <ExpanderWrite>
  DelayUS(20);
 8000bc0:	2014      	movs	r0, #20
 8000bc2:	f000 f82f 	bl	8000c24 <DelayUS>
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <DelayInit>:

static void DelayInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <DelayInit+0x4c>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	4a10      	ldr	r2, [pc, #64]	@ (8000c1c <DelayInit+0x4c>)
 8000bda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000bde:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000be0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <DelayInit+0x4c>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c1c <DelayInit+0x4c>)
 8000be6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000bea:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <DelayInit+0x50>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0b      	ldr	r2, [pc, #44]	@ (8000c20 <DelayInit+0x50>)
 8000bf2:	f023 0301 	bic.w	r3, r3, #1
 8000bf6:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000bf8:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <DelayInit+0x50>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a08      	ldr	r2, [pc, #32]	@ (8000c20 <DelayInit+0x50>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <DelayInit+0x50>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000c0a:	bf00      	nop
  __ASM volatile ("NOP");
 8000c0c:	bf00      	nop
  __ASM volatile ("NOP");
 8000c0e:	bf00      	nop
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000edf0 	.word	0xe000edf0
 8000c20:	e0001000 	.word	0xe0001000

08000c24 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000c24:	b480      	push	{r7}
 8000c26:	b087      	sub	sp, #28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <DelayUS+0x44>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0e      	ldr	r2, [pc, #56]	@ (8000c6c <DelayUS+0x48>)
 8000c32:	fba2 2303 	umull	r2, r3, r2, r3
 8000c36:	0c9a      	lsrs	r2, r3, #18
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	fb02 f303 	mul.w	r3, r2, r3
 8000c3e:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000c40:	4b0b      	ldr	r3, [pc, #44]	@ (8000c70 <DelayUS+0x4c>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000c46:	4b0a      	ldr	r3, [pc, #40]	@ (8000c70 <DelayUS+0x4c>)
 8000c48:	685a      	ldr	r2, [r3, #4]
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d8f6      	bhi.n	8000c46 <DelayUS+0x22>
}
 8000c58:	bf00      	nop
 8000c5a:	bf00      	nop
 8000c5c:	371c      	adds	r7, #28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000010 	.word	0x20000010
 8000c6c:	431bde83 	.word	0x431bde83
 8000c70:	e0001000 	.word	0xe0001000

08000c74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b08f      	sub	sp, #60	@ 0x3c
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c7a:	f000 fba7 	bl	80013cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c7e:	f000 f86b 	bl	8000d58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c82:	f000 f95d 	bl	8000f40 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c86:	f000 f931 	bl	8000eec <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000c8a:	f000 f8d3 	bl	8000e34 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000c8e:	f000 f8ff 	bl	8000e90 <MX_I2C3_Init>

  /* USER CODE BEGIN 2 */
  BMP180_Init(&hi2c3);
 8000c92:	482b      	ldr	r0, [pc, #172]	@ (8000d40 <main+0xcc>)
 8000c94:	f7ff fc8c 	bl	80005b0 <BMP180_Init>
  BMP180_SetOversampling(BMP180_ULTRA);
 8000c98:	2003      	movs	r0, #3
 8000c9a:	f7ff fc99 	bl	80005d0 <BMP180_SetOversampling>
  /* USER CODE END 2 */
  BMP180_UpdateCalibrationData();
 8000c9e:	f7ff fca7 	bl	80005f0 <BMP180_UpdateCalibrationData>

   /* USER CODE BEGIN 2 */
   HD44780_Init(2);
 8000ca2:	2002      	movs	r0, #2
 8000ca4:	f7ff fdec 	bl	8000880 <HD44780_Init>
   HD44780_Clear();
 8000ca8:	f7ff fe6e 	bl	8000988 <HD44780_Clear>
   HD44780_SetCursor(1,0);
 8000cac:	2100      	movs	r1, #0
 8000cae:	2001      	movs	r0, #1
 8000cb0:	f7ff fe80 	bl	80009b4 <HD44780_SetCursor>
   HD44780_PrintStr("BMP180");
 8000cb4:	4823      	ldr	r0, [pc, #140]	@ (8000d44 <main+0xd0>)
 8000cb6:	f7ff feee 	bl	8000a96 <HD44780_PrintStr>
   HAL_Delay(1000);
 8000cba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cbe:	f000 fbf7 	bl	80014b0 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 int32_t temperature = BMP180_GetRawTemperature();
 8000cc2:	f7ff fd99 	bl	80007f8 <BMP180_GetRawTemperature>
 8000cc6:	6378      	str	r0, [r7, #52]	@ 0x34
     char buffer[50];
	   sprintf(buffer, "%d.%d  C    \n\r", (int) temperature / 10, (int) temperature % 10);
 8000cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cca:	4a1f      	ldr	r2, [pc, #124]	@ (8000d48 <main+0xd4>)
 8000ccc:	fb82 1203 	smull	r1, r2, r2, r3
 8000cd0:	1092      	asrs	r2, r2, #2
 8000cd2:	17db      	asrs	r3, r3, #31
 8000cd4:	1ad4      	subs	r4, r2, r3
 8000cd6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d48 <main+0xd4>)
 8000cda:	fb83 1302 	smull	r1, r3, r3, r2
 8000cde:	1099      	asrs	r1, r3, #2
 8000ce0:	17d3      	asrs	r3, r2, #31
 8000ce2:	1ac9      	subs	r1, r1, r3
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	440b      	add	r3, r1
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	1ad1      	subs	r1, r2, r3
 8000cee:	4638      	mov	r0, r7
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	4622      	mov	r2, r4
 8000cf4:	4915      	ldr	r1, [pc, #84]	@ (8000d4c <main+0xd8>)
 8000cf6:	f003 f881 	bl	8003dfc <siprintf>
	  		//sprintf(buffer, "Temperature: %d.%d deg C\n\rPressure: %d Pa\n\r", (int) temperature / 10, (int) temperature % 10, (int) pressure);
    	 HAL_UART_Transmit(&huart3, (uint8_t*)&buffer, strlen(buffer), 1000);
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fa87 	bl	8000210 <strlen>
 8000d02:	4603      	mov	r3, r0
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	4639      	mov	r1, r7
 8000d08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d0c:	4810      	ldr	r0, [pc, #64]	@ (8000d50 <main+0xdc>)
 8000d0e:	f002 fcb9 	bl	8003684 <HAL_UART_Transmit>


	  	 	 HD44780_Clear();
 8000d12:	f7ff fe39 	bl	8000988 <HD44780_Clear>
	  	 	 HD44780_SetCursor(0,0);
 8000d16:	2100      	movs	r1, #0
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f7ff fe4b 	bl	80009b4 <HD44780_SetCursor>
	  	 	 HD44780_PrintStr("TEMP");
 8000d1e:	480d      	ldr	r0, [pc, #52]	@ (8000d54 <main+0xe0>)
 8000d20:	f7ff feb9 	bl	8000a96 <HD44780_PrintStr>
	  	 	 HD44780_SetCursor(8,0);
 8000d24:	2100      	movs	r1, #0
 8000d26:	2008      	movs	r0, #8
 8000d28:	f7ff fe44 	bl	80009b4 <HD44780_SetCursor>
	  	   	HD44780_PrintStr(buffer);
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff feb1 	bl	8000a96 <HD44780_PrintStr>
	  	     HAL_Delay(1000);
 8000d34:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d38:	f000 fbba 	bl	80014b0 <HAL_Delay>
  {
 8000d3c:	bf00      	nop
 8000d3e:	e7c0      	b.n	8000cc2 <main+0x4e>
 8000d40:	200000fc 	.word	0x200000fc
 8000d44:	08004764 	.word	0x08004764
 8000d48:	66666667 	.word	0x66666667
 8000d4c:	0800476c 	.word	0x0800476c
 8000d50:	20000150 	.word	0x20000150
 8000d54:	0800477c 	.word	0x0800477c

08000d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b094      	sub	sp, #80	@ 0x50
 8000d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	2234      	movs	r2, #52	@ 0x34
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f003 f868 	bl	8003e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d6c:	f107 0308 	add.w	r3, r7, #8
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	4b2a      	ldr	r3, [pc, #168]	@ (8000e2c <SystemClock_Config+0xd4>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d84:	4a29      	ldr	r2, [pc, #164]	@ (8000e2c <SystemClock_Config+0xd4>)
 8000d86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d8c:	4b27      	ldr	r3, [pc, #156]	@ (8000e2c <SystemClock_Config+0xd4>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d98:	2300      	movs	r3, #0
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	4b24      	ldr	r3, [pc, #144]	@ (8000e30 <SystemClock_Config+0xd8>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000da4:	4a22      	ldr	r2, [pc, #136]	@ (8000e30 <SystemClock_Config+0xd8>)
 8000da6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000daa:	6013      	str	r3, [r2, #0]
 8000dac:	4b20      	ldr	r3, [pc, #128]	@ (8000e30 <SystemClock_Config+0xd8>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000db8:	2302      	movs	r3, #2
 8000dba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc0:	2310      	movs	r3, #16
 8000dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000dcc:	2310      	movs	r3, #16
 8000dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dd0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000dd4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dde:	2302      	movs	r3, #2
 8000de0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	4618      	mov	r0, r3
 8000de8:	f002 f95e 	bl	80030a8 <HAL_RCC_OscConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000df2:	f000 f913 	bl	800101c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df6:	230f      	movs	r3, #15
 8000df8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e0c:	f107 0308 	add.w	r3, r7, #8
 8000e10:	2102      	movs	r1, #2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f001 fdfe 	bl	8002a14 <HAL_RCC_ClockConfig>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000e1e:	f000 f8fd 	bl	800101c <Error_Handler>
  }
}
 8000e22:	bf00      	nop
 8000e24:	3750      	adds	r7, #80	@ 0x50
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40007000 	.word	0x40007000

08000e34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e38:	4b12      	ldr	r3, [pc, #72]	@ (8000e84 <MX_I2C1_Init+0x50>)
 8000e3a:	4a13      	ldr	r2, [pc, #76]	@ (8000e88 <MX_I2C1_Init+0x54>)
 8000e3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e3e:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <MX_I2C1_Init+0x50>)
 8000e40:	4a12      	ldr	r2, [pc, #72]	@ (8000e8c <MX_I2C1_Init+0x58>)
 8000e42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	@ (8000e84 <MX_I2C1_Init+0x50>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e84 <MX_I2C1_Init+0x50>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <MX_I2C1_Init+0x50>)
 8000e52:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e58:	4b0a      	ldr	r3, [pc, #40]	@ (8000e84 <MX_I2C1_Init+0x50>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e5e:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <MX_I2C1_Init+0x50>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e64:	4b07      	ldr	r3, [pc, #28]	@ (8000e84 <MX_I2C1_Init+0x50>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e6a:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <MX_I2C1_Init+0x50>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e70:	4804      	ldr	r0, [pc, #16]	@ (8000e84 <MX_I2C1_Init+0x50>)
 8000e72:	f000 fdd5 	bl	8001a20 <HAL_I2C_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e7c:	f000 f8ce 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	200000a8 	.word	0x200000a8
 8000e88:	40005400 	.word	0x40005400
 8000e8c:	000186a0 	.word	0x000186a0

08000e90 <MX_I2C3_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c3.Instance = I2C3;
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <MX_I2C3_Init+0x50>)
 8000e96:	4a13      	ldr	r2, [pc, #76]	@ (8000ee4 <MX_I2C3_Init+0x54>)
 8000e98:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <MX_I2C3_Init+0x50>)
 8000e9c:	4a12      	ldr	r2, [pc, #72]	@ (8000ee8 <MX_I2C3_Init+0x58>)
 8000e9e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee0 <MX_I2C3_Init+0x50>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <MX_I2C3_Init+0x50>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <MX_I2C3_Init+0x50>)
 8000eae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000eb2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee0 <MX_I2C3_Init+0x50>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000eba:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <MX_I2C3_Init+0x50>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ec0:	4b07      	ldr	r3, [pc, #28]	@ (8000ee0 <MX_I2C3_Init+0x50>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ec6:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <MX_I2C3_Init+0x50>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ecc:	4804      	ldr	r0, [pc, #16]	@ (8000ee0 <MX_I2C3_Init+0x50>)
 8000ece:	f000 fda7 	bl	8001a20 <HAL_I2C_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000ed8:	f000 f8a0 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200000fc 	.word	0x200000fc
 8000ee4:	40005c00 	.word	0x40005c00
 8000ee8:	000186a0 	.word	0x000186a0

08000eec <MX_USART3_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart3.Instance = USART3;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	@ (8000f38 <MX_USART3_UART_Init+0x4c>)
 8000ef2:	4a12      	ldr	r2, [pc, #72]	@ (8000f3c <MX_USART3_UART_Init+0x50>)
 8000ef4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	@ (8000f38 <MX_USART3_UART_Init+0x4c>)
 8000ef8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000efc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	@ (8000f38 <MX_USART3_UART_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <MX_USART3_UART_Init+0x4c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f38 <MX_USART3_UART_Init+0x4c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f10:	4b09      	ldr	r3, [pc, #36]	@ (8000f38 <MX_USART3_UART_Init+0x4c>)
 8000f12:	220c      	movs	r2, #12
 8000f14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f16:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <MX_USART3_UART_Init+0x4c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <MX_USART3_UART_Init+0x4c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f22:	4805      	ldr	r0, [pc, #20]	@ (8000f38 <MX_USART3_UART_Init+0x4c>)
 8000f24:	f002 fb5e 	bl	80035e4 <HAL_UART_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f2e:	f000 f875 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000150 	.word	0x20000150
 8000f3c:	40004800 	.word	0x40004800

08000f40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	@ 0x28
 8000f44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001010 <MX_GPIO_Init+0xd0>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	4a2c      	ldr	r2, [pc, #176]	@ (8001010 <MX_GPIO_Init+0xd0>)
 8000f60:	f043 0304 	orr.w	r3, r3, #4
 8000f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f66:	4b2a      	ldr	r3, [pc, #168]	@ (8001010 <MX_GPIO_Init+0xd0>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	f003 0304 	and.w	r3, r3, #4
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b26      	ldr	r3, [pc, #152]	@ (8001010 <MX_GPIO_Init+0xd0>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	4a25      	ldr	r2, [pc, #148]	@ (8001010 <MX_GPIO_Init+0xd0>)
 8000f7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f82:	4b23      	ldr	r3, [pc, #140]	@ (8001010 <MX_GPIO_Init+0xd0>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	4b1f      	ldr	r3, [pc, #124]	@ (8001010 <MX_GPIO_Init+0xd0>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	4a1e      	ldr	r2, [pc, #120]	@ (8001010 <MX_GPIO_Init+0xd0>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001010 <MX_GPIO_Init+0xd0>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <MX_GPIO_Init+0xd0>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	4a17      	ldr	r2, [pc, #92]	@ (8001010 <MX_GPIO_Init+0xd0>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fba:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <MX_GPIO_Init+0xd0>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2120      	movs	r1, #32
 8000fca:	4812      	ldr	r0, [pc, #72]	@ (8001014 <MX_GPIO_Init+0xd4>)
 8000fcc:	f000 fd0e 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fd6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	480c      	ldr	r0, [pc, #48]	@ (8001018 <MX_GPIO_Init+0xd8>)
 8000fe8:	f000 fb6c 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fec:	2320      	movs	r3, #32
 8000fee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	4804      	ldr	r0, [pc, #16]	@ (8001014 <MX_GPIO_Init+0xd4>)
 8001004:	f000 fb5e 	bl	80016c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001008:	bf00      	nop
 800100a:	3728      	adds	r7, #40	@ 0x28
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40023800 	.word	0x40023800
 8001014:	40020000 	.word	0x40020000
 8001018:	40020800 	.word	0x40020800

0800101c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001020:	b672      	cpsid	i
}
 8001022:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <Error_Handler+0x8>

08001028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <HAL_MspInit+0x4c>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001036:	4a0f      	ldr	r2, [pc, #60]	@ (8001074 <HAL_MspInit+0x4c>)
 8001038:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800103c:	6453      	str	r3, [r2, #68]	@ 0x44
 800103e:	4b0d      	ldr	r3, [pc, #52]	@ (8001074 <HAL_MspInit+0x4c>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001042:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	603b      	str	r3, [r7, #0]
 800104e:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <HAL_MspInit+0x4c>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001052:	4a08      	ldr	r2, [pc, #32]	@ (8001074 <HAL_MspInit+0x4c>)
 8001054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001058:	6413      	str	r3, [r2, #64]	@ 0x40
 800105a:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <HAL_MspInit+0x4c>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001062:	603b      	str	r3, [r7, #0]
 8001064:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001066:	2007      	movs	r0, #7
 8001068:	f000 faf8 	bl	800165c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40023800 	.word	0x40023800

08001078 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08c      	sub	sp, #48	@ 0x30
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a42      	ldr	r2, [pc, #264]	@ (80011a0 <HAL_I2C_MspInit+0x128>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d12c      	bne.n	80010f4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]
 800109e:	4b41      	ldr	r3, [pc, #260]	@ (80011a4 <HAL_I2C_MspInit+0x12c>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	4a40      	ldr	r2, [pc, #256]	@ (80011a4 <HAL_I2C_MspInit+0x12c>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010aa:	4b3e      	ldr	r3, [pc, #248]	@ (80011a4 <HAL_I2C_MspInit+0x12c>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	61bb      	str	r3, [r7, #24]
 80010b4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010b6:	23c0      	movs	r3, #192	@ 0xc0
 80010b8:	61fb      	str	r3, [r7, #28]
       GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ba:	2312      	movs	r3, #18
 80010bc:	623b      	str	r3, [r7, #32]
       GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	@ 0x24
       GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c2:	2303      	movs	r3, #3
 80010c4:	62bb      	str	r3, [r7, #40]	@ 0x28
       GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010c6:	2304      	movs	r3, #4
 80010c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
       HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	4619      	mov	r1, r3
 80010d0:	4835      	ldr	r0, [pc, #212]	@ (80011a8 <HAL_I2C_MspInit+0x130>)
 80010d2:	f000 faf7 	bl	80016c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
 80010da:	4b32      	ldr	r3, [pc, #200]	@ (80011a4 <HAL_I2C_MspInit+0x12c>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010de:	4a31      	ldr	r2, [pc, #196]	@ (80011a4 <HAL_I2C_MspInit+0x12c>)
 80010e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e6:	4b2f      	ldr	r3, [pc, #188]	@ (80011a4 <HAL_I2C_MspInit+0x12c>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80010f2:	e050      	b.n	8001196 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a2c      	ldr	r2, [pc, #176]	@ (80011ac <HAL_I2C_MspInit+0x134>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d14b      	bne.n	8001196 <HAL_I2C_MspInit+0x11e>
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	4b28      	ldr	r3, [pc, #160]	@ (80011a4 <HAL_I2C_MspInit+0x12c>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	4a27      	ldr	r2, [pc, #156]	@ (80011a4 <HAL_I2C_MspInit+0x12c>)
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	6313      	str	r3, [r2, #48]	@ 0x30
 800110e:	4b25      	ldr	r3, [pc, #148]	@ (80011a4 <HAL_I2C_MspInit+0x12c>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]
	     __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b21      	ldr	r3, [pc, #132]	@ (80011a4 <HAL_I2C_MspInit+0x12c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a20      	ldr	r2, [pc, #128]	@ (80011a4 <HAL_I2C_MspInit+0x12c>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
 800112a:	4b1e      	ldr	r3, [pc, #120]	@ (80011a4 <HAL_I2C_MspInit+0x12c>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
	     GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001136:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800113a:	61fb      	str	r3, [r7, #28]
	     GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800113c:	2312      	movs	r3, #18
 800113e:	623b      	str	r3, [r7, #32]
	     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	627b      	str	r3, [r7, #36]	@ 0x24
	     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001144:	2303      	movs	r3, #3
 8001146:	62bb      	str	r3, [r7, #40]	@ 0x28
	     GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001148:	2304      	movs	r3, #4
 800114a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	4619      	mov	r1, r3
 8001152:	4817      	ldr	r0, [pc, #92]	@ (80011b0 <HAL_I2C_MspInit+0x138>)
 8001154:	f000 fab6 	bl	80016c4 <HAL_GPIO_Init>
	     GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001158:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800115c:	61fb      	str	r3, [r7, #28]
	     GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800115e:	2312      	movs	r3, #18
 8001160:	623b      	str	r3, [r7, #32]
	     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	@ 0x24
	     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001166:	2303      	movs	r3, #3
 8001168:	62bb      	str	r3, [r7, #40]	@ 0x28
	     GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800116a:	2304      	movs	r3, #4
 800116c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	4619      	mov	r1, r3
 8001174:	480f      	ldr	r0, [pc, #60]	@ (80011b4 <HAL_I2C_MspInit+0x13c>)
 8001176:	f000 faa5 	bl	80016c4 <HAL_GPIO_Init>
	     __HAL_RCC_I2C3_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <HAL_I2C_MspInit+0x12c>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001182:	4a08      	ldr	r2, [pc, #32]	@ (80011a4 <HAL_I2C_MspInit+0x12c>)
 8001184:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001188:	6413      	str	r3, [r2, #64]	@ 0x40
 800118a:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <HAL_I2C_MspInit+0x12c>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
}
 8001196:	bf00      	nop
 8001198:	3730      	adds	r7, #48	@ 0x30
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40005400 	.word	0x40005400
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020400 	.word	0x40020400
 80011ac:	40005c00 	.word	0x40005c00
 80011b0:	40020800 	.word	0x40020800
 80011b4:	40020000 	.word	0x40020000

080011b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	@ 0x28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a28      	ldr	r2, [pc, #160]	@ (8001278 <HAL_UART_MspInit+0xc0>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d14a      	bne.n	8001270 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	4b27      	ldr	r3, [pc, #156]	@ (800127c <HAL_UART_MspInit+0xc4>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	4a26      	ldr	r2, [pc, #152]	@ (800127c <HAL_UART_MspInit+0xc4>)
 80011e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ea:	4b24      	ldr	r3, [pc, #144]	@ (800127c <HAL_UART_MspInit+0xc4>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	4b20      	ldr	r3, [pc, #128]	@ (800127c <HAL_UART_MspInit+0xc4>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	4a1f      	ldr	r2, [pc, #124]	@ (800127c <HAL_UART_MspInit+0xc4>)
 8001200:	f043 0304 	orr.w	r3, r3, #4
 8001204:	6313      	str	r3, [r2, #48]	@ 0x30
 8001206:	4b1d      	ldr	r3, [pc, #116]	@ (800127c <HAL_UART_MspInit+0xc4>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	4b19      	ldr	r3, [pc, #100]	@ (800127c <HAL_UART_MspInit+0xc4>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	4a18      	ldr	r2, [pc, #96]	@ (800127c <HAL_UART_MspInit+0xc4>)
 800121c:	f043 0302 	orr.w	r3, r3, #2
 8001220:	6313      	str	r3, [r2, #48]	@ 0x30
 8001222:	4b16      	ldr	r3, [pc, #88]	@ (800127c <HAL_UART_MspInit+0xc4>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB10     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800122e:	2320      	movs	r3, #32
 8001230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123a:	2303      	movs	r3, #3
 800123c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800123e:	2307      	movs	r3, #7
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	480d      	ldr	r0, [pc, #52]	@ (8001280 <HAL_UART_MspInit+0xc8>)
 800124a:	f000 fa3b 	bl	80016c4 <HAL_GPIO_Init>

      GPIO_InitStruct.Pin = GPIO_PIN_10;
 800124e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001252:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	623b      	str	r3, [r7, #32]
      GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001260:	2307      	movs	r3, #7
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	4619      	mov	r1, r3
 800126a:	4806      	ldr	r0, [pc, #24]	@ (8001284 <HAL_UART_MspInit+0xcc>)
 800126c:	f000 fa2a 	bl	80016c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001270:	bf00      	nop
 8001272:	3728      	adds	r7, #40	@ 0x28
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40004800 	.word	0x40004800
 800127c:	40023800 	.word	0x40023800
 8001280:	40020800 	.word	0x40020800
 8001284:	40020400 	.word	0x40020400

08001288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <NMI_Handler+0x4>

08001290 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <HardFault_Handler+0x4>

08001298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <MemManage_Handler+0x4>

080012a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <BusFault_Handler+0x4>

080012a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <UsageFault_Handler+0x4>

080012b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012de:	f000 f8c7 	bl	8001470 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012f0:	4a14      	ldr	r2, [pc, #80]	@ (8001344 <_sbrk+0x5c>)
 80012f2:	4b15      	ldr	r3, [pc, #84]	@ (8001348 <_sbrk+0x60>)
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012fc:	4b13      	ldr	r3, [pc, #76]	@ (800134c <_sbrk+0x64>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d102      	bne.n	800130a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001304:	4b11      	ldr	r3, [pc, #68]	@ (800134c <_sbrk+0x64>)
 8001306:	4a12      	ldr	r2, [pc, #72]	@ (8001350 <_sbrk+0x68>)
 8001308:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800130a:	4b10      	ldr	r3, [pc, #64]	@ (800134c <_sbrk+0x64>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4413      	add	r3, r2
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	429a      	cmp	r2, r3
 8001316:	d207      	bcs.n	8001328 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001318:	f002 fd98 	bl	8003e4c <__errno>
 800131c:	4603      	mov	r3, r0
 800131e:	220c      	movs	r2, #12
 8001320:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001322:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001326:	e009      	b.n	800133c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001328:	4b08      	ldr	r3, [pc, #32]	@ (800134c <_sbrk+0x64>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800132e:	4b07      	ldr	r3, [pc, #28]	@ (800134c <_sbrk+0x64>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	4a05      	ldr	r2, [pc, #20]	@ (800134c <_sbrk+0x64>)
 8001338:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800133a:	68fb      	ldr	r3, [r7, #12]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20020000 	.word	0x20020000
 8001348:	00000400 	.word	0x00000400
 800134c:	20000198 	.word	0x20000198
 8001350:	200002e8 	.word	0x200002e8

08001354 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001358:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <SystemInit+0x20>)
 800135a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800135e:	4a05      	ldr	r2, [pc, #20]	@ (8001374 <SystemInit+0x20>)
 8001360:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001364:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001378:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800137c:	f7ff ffea 	bl	8001354 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001380:	480c      	ldr	r0, [pc, #48]	@ (80013b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001382:	490d      	ldr	r1, [pc, #52]	@ (80013b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001384:	4a0d      	ldr	r2, [pc, #52]	@ (80013bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001388:	e002      	b.n	8001390 <LoopCopyDataInit>

0800138a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800138c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138e:	3304      	adds	r3, #4

08001390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001394:	d3f9      	bcc.n	800138a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001396:	4a0a      	ldr	r2, [pc, #40]	@ (80013c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001398:	4c0a      	ldr	r4, [pc, #40]	@ (80013c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800139c:	e001      	b.n	80013a2 <LoopFillZerobss>

0800139e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a0:	3204      	adds	r2, #4

080013a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a4:	d3fb      	bcc.n	800139e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013a6:	f002 fd57 	bl	8003e58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013aa:	f7ff fc63 	bl	8000c74 <main>
  bx  lr    
 80013ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80013bc:	080047e0 	.word	0x080047e0
  ldr r2, =_sbss
 80013c0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80013c4:	200002e8 	.word	0x200002e8

080013c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013c8:	e7fe      	b.n	80013c8 <ADC_IRQHandler>
	...

080013cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013d0:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <HAL_Init+0x40>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a0d      	ldr	r2, [pc, #52]	@ (800140c <HAL_Init+0x40>)
 80013d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013dc:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <HAL_Init+0x40>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a0a      	ldr	r2, [pc, #40]	@ (800140c <HAL_Init+0x40>)
 80013e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e8:	4b08      	ldr	r3, [pc, #32]	@ (800140c <HAL_Init+0x40>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a07      	ldr	r2, [pc, #28]	@ (800140c <HAL_Init+0x40>)
 80013ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f4:	2003      	movs	r0, #3
 80013f6:	f000 f931 	bl	800165c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013fa:	2000      	movs	r0, #0
 80013fc:	f000 f808 	bl	8001410 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001400:	f7ff fe12 	bl	8001028 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40023c00 	.word	0x40023c00

08001410 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001418:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <HAL_InitTick+0x54>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <HAL_InitTick+0x58>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4619      	mov	r1, r3
 8001422:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001426:	fbb3 f3f1 	udiv	r3, r3, r1
 800142a:	fbb2 f3f3 	udiv	r3, r2, r3
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f93b 	bl	80016aa <HAL_SYSTICK_Config>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e00e      	b.n	800145c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b0f      	cmp	r3, #15
 8001442:	d80a      	bhi.n	800145a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001444:	2200      	movs	r2, #0
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800144c:	f000 f911 	bl	8001672 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001450:	4a06      	ldr	r2, [pc, #24]	@ (800146c <HAL_InitTick+0x5c>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	e000      	b.n	800145c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000010 	.word	0x20000010
 8001468:	20000018 	.word	0x20000018
 800146c:	20000014 	.word	0x20000014

08001470 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001474:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <HAL_IncTick+0x20>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <HAL_IncTick+0x24>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4413      	add	r3, r2
 8001480:	4a04      	ldr	r2, [pc, #16]	@ (8001494 <HAL_IncTick+0x24>)
 8001482:	6013      	str	r3, [r2, #0]
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000018 	.word	0x20000018
 8001494:	2000019c 	.word	0x2000019c

08001498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return uwTick;
 800149c:	4b03      	ldr	r3, [pc, #12]	@ (80014ac <HAL_GetTick+0x14>)
 800149e:	681b      	ldr	r3, [r3, #0]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	2000019c 	.word	0x2000019c

080014b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b8:	f7ff ffee 	bl	8001498 <HAL_GetTick>
 80014bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80014c8:	d005      	beq.n	80014d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ca:	4b0a      	ldr	r3, [pc, #40]	@ (80014f4 <HAL_Delay+0x44>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4413      	add	r3, r2
 80014d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014d6:	bf00      	nop
 80014d8:	f7ff ffde 	bl	8001498 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d8f7      	bhi.n	80014d8 <HAL_Delay+0x28>
  {
  }
}
 80014e8:	bf00      	nop
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000018 	.word	0x20000018

080014f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001508:	4b0c      	ldr	r3, [pc, #48]	@ (800153c <__NVIC_SetPriorityGrouping+0x44>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001514:	4013      	ands	r3, r2
 8001516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001520:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001524:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152a:	4a04      	ldr	r2, [pc, #16]	@ (800153c <__NVIC_SetPriorityGrouping+0x44>)
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	60d3      	str	r3, [r2, #12]
}
 8001530:	bf00      	nop
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001544:	4b04      	ldr	r3, [pc, #16]	@ (8001558 <__NVIC_GetPriorityGrouping+0x18>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	f003 0307 	and.w	r3, r3, #7
}
 800154e:	4618      	mov	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	6039      	str	r1, [r7, #0]
 8001566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156c:	2b00      	cmp	r3, #0
 800156e:	db0a      	blt.n	8001586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	b2da      	uxtb	r2, r3
 8001574:	490c      	ldr	r1, [pc, #48]	@ (80015a8 <__NVIC_SetPriority+0x4c>)
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	0112      	lsls	r2, r2, #4
 800157c:	b2d2      	uxtb	r2, r2
 800157e:	440b      	add	r3, r1
 8001580:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001584:	e00a      	b.n	800159c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	b2da      	uxtb	r2, r3
 800158a:	4908      	ldr	r1, [pc, #32]	@ (80015ac <__NVIC_SetPriority+0x50>)
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	3b04      	subs	r3, #4
 8001594:	0112      	lsls	r2, r2, #4
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	440b      	add	r3, r1
 800159a:	761a      	strb	r2, [r3, #24]
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	e000e100 	.word	0xe000e100
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b089      	sub	sp, #36	@ 0x24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f1c3 0307 	rsb	r3, r3, #7
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	bf28      	it	cs
 80015ce:	2304      	movcs	r3, #4
 80015d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3304      	adds	r3, #4
 80015d6:	2b06      	cmp	r3, #6
 80015d8:	d902      	bls.n	80015e0 <NVIC_EncodePriority+0x30>
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3b03      	subs	r3, #3
 80015de:	e000      	b.n	80015e2 <NVIC_EncodePriority+0x32>
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43da      	mvns	r2, r3
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	401a      	ands	r2, r3
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001602:	43d9      	mvns	r1, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	4313      	orrs	r3, r2
         );
}
 800160a:	4618      	mov	r0, r3
 800160c:	3724      	adds	r7, #36	@ 0x24
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
	...

08001618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3b01      	subs	r3, #1
 8001624:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001628:	d301      	bcc.n	800162e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800162a:	2301      	movs	r3, #1
 800162c:	e00f      	b.n	800164e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800162e:	4a0a      	ldr	r2, [pc, #40]	@ (8001658 <SysTick_Config+0x40>)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3b01      	subs	r3, #1
 8001634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001636:	210f      	movs	r1, #15
 8001638:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800163c:	f7ff ff8e 	bl	800155c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001640:	4b05      	ldr	r3, [pc, #20]	@ (8001658 <SysTick_Config+0x40>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001646:	4b04      	ldr	r3, [pc, #16]	@ (8001658 <SysTick_Config+0x40>)
 8001648:	2207      	movs	r2, #7
 800164a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	e000e010 	.word	0xe000e010

0800165c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ff47 	bl	80014f8 <__NVIC_SetPriorityGrouping>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001672:	b580      	push	{r7, lr}
 8001674:	b086      	sub	sp, #24
 8001676:	af00      	add	r7, sp, #0
 8001678:	4603      	mov	r3, r0
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
 800167e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001684:	f7ff ff5c 	bl	8001540 <__NVIC_GetPriorityGrouping>
 8001688:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	68b9      	ldr	r1, [r7, #8]
 800168e:	6978      	ldr	r0, [r7, #20]
 8001690:	f7ff ff8e 	bl	80015b0 <NVIC_EncodePriority>
 8001694:	4602      	mov	r2, r0
 8001696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169a:	4611      	mov	r1, r2
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff5d 	bl	800155c <__NVIC_SetPriority>
}
 80016a2:	bf00      	nop
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff ffb0 	bl	8001618 <SysTick_Config>
 80016b8:	4603      	mov	r3, r0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b089      	sub	sp, #36	@ 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
 80016de:	e165      	b.n	80019ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016e0:	2201      	movs	r2, #1
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	f040 8154 	bne.w	80019a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	2b01      	cmp	r3, #1
 8001708:	d005      	beq.n	8001716 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001712:	2b02      	cmp	r3, #2
 8001714:	d130      	bne.n	8001778 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	2203      	movs	r2, #3
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	68da      	ldr	r2, [r3, #12]
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800174c:	2201      	movs	r2, #1
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	091b      	lsrs	r3, r3, #4
 8001762:	f003 0201 	and.w	r2, r3, #1
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 0303 	and.w	r3, r3, #3
 8001780:	2b03      	cmp	r3, #3
 8001782:	d017      	beq.n	80017b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	2203      	movs	r2, #3
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d123      	bne.n	8001808 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	08da      	lsrs	r2, r3, #3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3208      	adds	r2, #8
 80017c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	220f      	movs	r2, #15
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	691a      	ldr	r2, [r3, #16]
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	08da      	lsrs	r2, r3, #3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3208      	adds	r2, #8
 8001802:	69b9      	ldr	r1, [r7, #24]
 8001804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	2203      	movs	r2, #3
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0203 	and.w	r2, r3, #3
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 80ae 	beq.w	80019a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	4b5d      	ldr	r3, [pc, #372]	@ (80019c4 <HAL_GPIO_Init+0x300>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001852:	4a5c      	ldr	r2, [pc, #368]	@ (80019c4 <HAL_GPIO_Init+0x300>)
 8001854:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001858:	6453      	str	r3, [r2, #68]	@ 0x44
 800185a:	4b5a      	ldr	r3, [pc, #360]	@ (80019c4 <HAL_GPIO_Init+0x300>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001866:	4a58      	ldr	r2, [pc, #352]	@ (80019c8 <HAL_GPIO_Init+0x304>)
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	089b      	lsrs	r3, r3, #2
 800186c:	3302      	adds	r3, #2
 800186e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001872:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	220f      	movs	r2, #15
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4013      	ands	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a4f      	ldr	r2, [pc, #316]	@ (80019cc <HAL_GPIO_Init+0x308>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d025      	beq.n	80018de <HAL_GPIO_Init+0x21a>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a4e      	ldr	r2, [pc, #312]	@ (80019d0 <HAL_GPIO_Init+0x30c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d01f      	beq.n	80018da <HAL_GPIO_Init+0x216>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a4d      	ldr	r2, [pc, #308]	@ (80019d4 <HAL_GPIO_Init+0x310>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d019      	beq.n	80018d6 <HAL_GPIO_Init+0x212>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a4c      	ldr	r2, [pc, #304]	@ (80019d8 <HAL_GPIO_Init+0x314>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d013      	beq.n	80018d2 <HAL_GPIO_Init+0x20e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a4b      	ldr	r2, [pc, #300]	@ (80019dc <HAL_GPIO_Init+0x318>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d00d      	beq.n	80018ce <HAL_GPIO_Init+0x20a>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a4a      	ldr	r2, [pc, #296]	@ (80019e0 <HAL_GPIO_Init+0x31c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d007      	beq.n	80018ca <HAL_GPIO_Init+0x206>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a49      	ldr	r2, [pc, #292]	@ (80019e4 <HAL_GPIO_Init+0x320>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d101      	bne.n	80018c6 <HAL_GPIO_Init+0x202>
 80018c2:	2306      	movs	r3, #6
 80018c4:	e00c      	b.n	80018e0 <HAL_GPIO_Init+0x21c>
 80018c6:	2307      	movs	r3, #7
 80018c8:	e00a      	b.n	80018e0 <HAL_GPIO_Init+0x21c>
 80018ca:	2305      	movs	r3, #5
 80018cc:	e008      	b.n	80018e0 <HAL_GPIO_Init+0x21c>
 80018ce:	2304      	movs	r3, #4
 80018d0:	e006      	b.n	80018e0 <HAL_GPIO_Init+0x21c>
 80018d2:	2303      	movs	r3, #3
 80018d4:	e004      	b.n	80018e0 <HAL_GPIO_Init+0x21c>
 80018d6:	2302      	movs	r3, #2
 80018d8:	e002      	b.n	80018e0 <HAL_GPIO_Init+0x21c>
 80018da:	2301      	movs	r3, #1
 80018dc:	e000      	b.n	80018e0 <HAL_GPIO_Init+0x21c>
 80018de:	2300      	movs	r3, #0
 80018e0:	69fa      	ldr	r2, [r7, #28]
 80018e2:	f002 0203 	and.w	r2, r2, #3
 80018e6:	0092      	lsls	r2, r2, #2
 80018e8:	4093      	lsls	r3, r2
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018f0:	4935      	ldr	r1, [pc, #212]	@ (80019c8 <HAL_GPIO_Init+0x304>)
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	089b      	lsrs	r3, r3, #2
 80018f6:	3302      	adds	r3, #2
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018fe:	4b3a      	ldr	r3, [pc, #232]	@ (80019e8 <HAL_GPIO_Init+0x324>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	43db      	mvns	r3, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4013      	ands	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001922:	4a31      	ldr	r2, [pc, #196]	@ (80019e8 <HAL_GPIO_Init+0x324>)
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001928:	4b2f      	ldr	r3, [pc, #188]	@ (80019e8 <HAL_GPIO_Init+0x324>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	4313      	orrs	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800194c:	4a26      	ldr	r2, [pc, #152]	@ (80019e8 <HAL_GPIO_Init+0x324>)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001952:	4b25      	ldr	r3, [pc, #148]	@ (80019e8 <HAL_GPIO_Init+0x324>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	43db      	mvns	r3, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4013      	ands	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001976:	4a1c      	ldr	r2, [pc, #112]	@ (80019e8 <HAL_GPIO_Init+0x324>)
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800197c:	4b1a      	ldr	r3, [pc, #104]	@ (80019e8 <HAL_GPIO_Init+0x324>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	4313      	orrs	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019a0:	4a11      	ldr	r2, [pc, #68]	@ (80019e8 <HAL_GPIO_Init+0x324>)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3301      	adds	r3, #1
 80019aa:	61fb      	str	r3, [r7, #28]
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	2b0f      	cmp	r3, #15
 80019b0:	f67f ae96 	bls.w	80016e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019b4:	bf00      	nop
 80019b6:	bf00      	nop
 80019b8:	3724      	adds	r7, #36	@ 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40013800 	.word	0x40013800
 80019cc:	40020000 	.word	0x40020000
 80019d0:	40020400 	.word	0x40020400
 80019d4:	40020800 	.word	0x40020800
 80019d8:	40020c00 	.word	0x40020c00
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40021400 	.word	0x40021400
 80019e4:	40021800 	.word	0x40021800
 80019e8:	40013c00 	.word	0x40013c00

080019ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	807b      	strh	r3, [r7, #2]
 80019f8:	4613      	mov	r3, r2
 80019fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019fc:	787b      	ldrb	r3, [r7, #1]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a02:	887a      	ldrh	r2, [r7, #2]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a08:	e003      	b.n	8001a12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a0a:	887b      	ldrh	r3, [r7, #2]
 8001a0c:	041a      	lsls	r2, r3, #16
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	619a      	str	r2, [r3, #24]
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e12b      	b.n	8001c8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d106      	bne.n	8001a4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff fb16 	bl	8001078 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2224      	movs	r2, #36	@ 0x24
 8001a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0201 	bic.w	r2, r2, #1
 8001a62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a84:	f001 f8b8 	bl	8002bf8 <HAL_RCC_GetPCLK1Freq>
 8001a88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	4a81      	ldr	r2, [pc, #516]	@ (8001c94 <HAL_I2C_Init+0x274>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d807      	bhi.n	8001aa4 <HAL_I2C_Init+0x84>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4a80      	ldr	r2, [pc, #512]	@ (8001c98 <HAL_I2C_Init+0x278>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	bf94      	ite	ls
 8001a9c:	2301      	movls	r3, #1
 8001a9e:	2300      	movhi	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	e006      	b.n	8001ab2 <HAL_I2C_Init+0x92>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4a7d      	ldr	r2, [pc, #500]	@ (8001c9c <HAL_I2C_Init+0x27c>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	bf94      	ite	ls
 8001aac:	2301      	movls	r3, #1
 8001aae:	2300      	movhi	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e0e7      	b.n	8001c8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	4a78      	ldr	r2, [pc, #480]	@ (8001ca0 <HAL_I2C_Init+0x280>)
 8001abe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac2:	0c9b      	lsrs	r3, r3, #18
 8001ac4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	4a6a      	ldr	r2, [pc, #424]	@ (8001c94 <HAL_I2C_Init+0x274>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d802      	bhi.n	8001af4 <HAL_I2C_Init+0xd4>
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	3301      	adds	r3, #1
 8001af2:	e009      	b.n	8001b08 <HAL_I2C_Init+0xe8>
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001afa:	fb02 f303 	mul.w	r3, r2, r3
 8001afe:	4a69      	ldr	r2, [pc, #420]	@ (8001ca4 <HAL_I2C_Init+0x284>)
 8001b00:	fba2 2303 	umull	r2, r3, r2, r3
 8001b04:	099b      	lsrs	r3, r3, #6
 8001b06:	3301      	adds	r3, #1
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6812      	ldr	r2, [r2, #0]
 8001b0c:	430b      	orrs	r3, r1
 8001b0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001b1a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	495c      	ldr	r1, [pc, #368]	@ (8001c94 <HAL_I2C_Init+0x274>)
 8001b24:	428b      	cmp	r3, r1
 8001b26:	d819      	bhi.n	8001b5c <HAL_I2C_Init+0x13c>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	1e59      	subs	r1, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b36:	1c59      	adds	r1, r3, #1
 8001b38:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001b3c:	400b      	ands	r3, r1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00a      	beq.n	8001b58 <HAL_I2C_Init+0x138>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1e59      	subs	r1, r3, #1
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b50:	3301      	adds	r3, #1
 8001b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b56:	e051      	b.n	8001bfc <HAL_I2C_Init+0x1dc>
 8001b58:	2304      	movs	r3, #4
 8001b5a:	e04f      	b.n	8001bfc <HAL_I2C_Init+0x1dc>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d111      	bne.n	8001b88 <HAL_I2C_Init+0x168>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	1e58      	subs	r0, r3, #1
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6859      	ldr	r1, [r3, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	440b      	add	r3, r1
 8001b72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b76:	3301      	adds	r3, #1
 8001b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	bf0c      	ite	eq
 8001b80:	2301      	moveq	r3, #1
 8001b82:	2300      	movne	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	e012      	b.n	8001bae <HAL_I2C_Init+0x18e>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1e58      	subs	r0, r3, #1
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6859      	ldr	r1, [r3, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	0099      	lsls	r1, r3, #2
 8001b98:	440b      	add	r3, r1
 8001b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	bf0c      	ite	eq
 8001ba8:	2301      	moveq	r3, #1
 8001baa:	2300      	movne	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_I2C_Init+0x196>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e022      	b.n	8001bfc <HAL_I2C_Init+0x1dc>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10e      	bne.n	8001bdc <HAL_I2C_Init+0x1bc>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	1e58      	subs	r0, r3, #1
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6859      	ldr	r1, [r3, #4]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	440b      	add	r3, r1
 8001bcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bda:	e00f      	b.n	8001bfc <HAL_I2C_Init+0x1dc>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	1e58      	subs	r0, r3, #1
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6859      	ldr	r1, [r3, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	0099      	lsls	r1, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	6809      	ldr	r1, [r1, #0]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69da      	ldr	r2, [r3, #28]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001c2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6911      	ldr	r1, [r2, #16]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	68d2      	ldr	r2, [r2, #12]
 8001c36:	4311      	orrs	r1, r2
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	430b      	orrs	r3, r1
 8001c3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	695a      	ldr	r2, [r3, #20]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	431a      	orrs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0201 	orr.w	r2, r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2220      	movs	r2, #32
 8001c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	000186a0 	.word	0x000186a0
 8001c98:	001e847f 	.word	0x001e847f
 8001c9c:	003d08ff 	.word	0x003d08ff
 8001ca0:	431bde83 	.word	0x431bde83
 8001ca4:	10624dd3 	.word	0x10624dd3

08001ca8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af02      	add	r7, sp, #8
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	817b      	strh	r3, [r7, #10]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cbc:	f7ff fbec 	bl	8001498 <HAL_GetTick>
 8001cc0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b20      	cmp	r3, #32
 8001ccc:	f040 80e0 	bne.w	8001e90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	2319      	movs	r3, #25
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	4970      	ldr	r1, [pc, #448]	@ (8001e9c <HAL_I2C_Master_Transmit+0x1f4>)
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 fc64 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e0d3      	b.n	8001e92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_I2C_Master_Transmit+0x50>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e0cc      	b.n	8001e92 <HAL_I2C_Master_Transmit+0x1ea>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d007      	beq.n	8001d1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 0201 	orr.w	r2, r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2221      	movs	r2, #33	@ 0x21
 8001d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2210      	movs	r2, #16
 8001d3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	893a      	ldrh	r2, [r7, #8]
 8001d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4a50      	ldr	r2, [pc, #320]	@ (8001ea0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d60:	8979      	ldrh	r1, [r7, #10]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	6a3a      	ldr	r2, [r7, #32]
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 face 	bl	8002308 <I2C_MasterRequestWrite>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e08d      	b.n	8001e92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d8c:	e066      	b.n	8001e5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	6a39      	ldr	r1, [r7, #32]
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f000 fd22 	bl	80027dc <I2C_WaitOnTXEFlagUntilTimeout>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00d      	beq.n	8001dba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d107      	bne.n	8001db6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001db4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e06b      	b.n	8001e92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbe:	781a      	ldrb	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001de2:	3b01      	subs	r3, #1
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d11b      	bne.n	8001e30 <HAL_I2C_Master_Transmit+0x188>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d017      	beq.n	8001e30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e04:	781a      	ldrb	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e10:	1c5a      	adds	r2, r3, #1
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	6a39      	ldr	r1, [r7, #32]
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 fd19 	bl	800286c <I2C_WaitOnBTFFlagUntilTimeout>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00d      	beq.n	8001e5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d107      	bne.n	8001e58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e01a      	b.n	8001e92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d194      	bne.n	8001d8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2220      	movs	r2, #32
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	e000      	b.n	8001e92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e90:	2302      	movs	r3, #2
  }
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	00100002 	.word	0x00100002
 8001ea0:	ffff0000 	.word	0xffff0000

08001ea4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08c      	sub	sp, #48	@ 0x30
 8001ea8:	af02      	add	r7, sp, #8
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	817b      	strh	r3, [r7, #10]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001eb8:	f7ff faee 	bl	8001498 <HAL_GetTick>
 8001ebc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b20      	cmp	r3, #32
 8001ec8:	f040 8217 	bne.w	80022fa <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	2319      	movs	r3, #25
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	497c      	ldr	r1, [pc, #496]	@ (80020c8 <HAL_I2C_Master_Receive+0x224>)
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 fb66 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e20a      	b.n	80022fc <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d101      	bne.n	8001ef4 <HAL_I2C_Master_Receive+0x50>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e203      	b.n	80022fc <HAL_I2C_Master_Receive+0x458>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d007      	beq.n	8001f1a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f042 0201 	orr.w	r2, r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2222      	movs	r2, #34	@ 0x22
 8001f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2210      	movs	r2, #16
 8001f36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	893a      	ldrh	r2, [r7, #8]
 8001f4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	4a5c      	ldr	r2, [pc, #368]	@ (80020cc <HAL_I2C_Master_Receive+0x228>)
 8001f5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f5c:	8979      	ldrh	r1, [r7, #10]
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f000 fa52 	bl	800240c <I2C_MasterRequestRead>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e1c4      	b.n	80022fc <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d113      	bne.n	8001fa2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	623b      	str	r3, [r7, #32]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	623b      	str	r3, [r7, #32]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	623b      	str	r3, [r7, #32]
 8001f8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	e198      	b.n	80022d4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d11b      	bne.n	8001fe2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	61fb      	str	r3, [r7, #28]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	61fb      	str	r3, [r7, #28]
 8001fce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	e178      	b.n	80022d4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d11b      	bne.n	8002022 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ff8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002008:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800200a:	2300      	movs	r3, #0
 800200c:	61bb      	str	r3, [r7, #24]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	61bb      	str	r3, [r7, #24]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	61bb      	str	r3, [r7, #24]
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	e158      	b.n	80022d4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002030:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002048:	e144      	b.n	80022d4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800204e:	2b03      	cmp	r3, #3
 8002050:	f200 80f1 	bhi.w	8002236 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002058:	2b01      	cmp	r3, #1
 800205a:	d123      	bne.n	80020a4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800205c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800205e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 fc4b 	bl	80028fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e145      	b.n	80022fc <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691a      	ldr	r2, [r3, #16]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800208c:	3b01      	subs	r3, #1
 800208e:	b29a      	uxth	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002098:	b29b      	uxth	r3, r3
 800209a:	3b01      	subs	r3, #1
 800209c:	b29a      	uxth	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80020a2:	e117      	b.n	80022d4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d14e      	bne.n	800214a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020b2:	2200      	movs	r2, #0
 80020b4:	4906      	ldr	r1, [pc, #24]	@ (80020d0 <HAL_I2C_Master_Receive+0x22c>)
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 fa76 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d008      	beq.n	80020d4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e11a      	b.n	80022fc <HAL_I2C_Master_Receive+0x458>
 80020c6:	bf00      	nop
 80020c8:	00100002 	.word	0x00100002
 80020cc:	ffff0000 	.word	0xffff0000
 80020d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691a      	ldr	r2, [r3, #16]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002100:	3b01      	subs	r3, #1
 8002102:	b29a      	uxth	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800210c:	b29b      	uxth	r3, r3
 800210e:	3b01      	subs	r3, #1
 8002110:	b29a      	uxth	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	691a      	ldr	r2, [r3, #16]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002132:	3b01      	subs	r3, #1
 8002134:	b29a      	uxth	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800213e:	b29b      	uxth	r3, r3
 8002140:	3b01      	subs	r3, #1
 8002142:	b29a      	uxth	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002148:	e0c4      	b.n	80022d4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800214a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002150:	2200      	movs	r2, #0
 8002152:	496c      	ldr	r1, [pc, #432]	@ (8002304 <HAL_I2C_Master_Receive+0x460>)
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 fa27 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e0cb      	b.n	80022fc <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002172:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	691a      	ldr	r2, [r3, #16]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002190:	3b01      	subs	r3, #1
 8002192:	b29a      	uxth	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800219c:	b29b      	uxth	r3, r3
 800219e:	3b01      	subs	r3, #1
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ac:	2200      	movs	r2, #0
 80021ae:	4955      	ldr	r1, [pc, #340]	@ (8002304 <HAL_I2C_Master_Receive+0x460>)
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 f9f9 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e09d      	b.n	80022fc <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691a      	ldr	r2, [r3, #16]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	3b01      	subs	r3, #1
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800221e:	3b01      	subs	r3, #1
 8002220:	b29a      	uxth	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800222a:	b29b      	uxth	r3, r3
 800222c:	3b01      	subs	r3, #1
 800222e:	b29a      	uxth	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002234:	e04e      	b.n	80022d4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002238:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 fb5e 	bl	80028fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e058      	b.n	80022fc <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002266:	3b01      	subs	r3, #1
 8002268:	b29a      	uxth	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002272:	b29b      	uxth	r3, r3
 8002274:	3b01      	subs	r3, #1
 8002276:	b29a      	uxth	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b04      	cmp	r3, #4
 8002288:	d124      	bne.n	80022d4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800228e:	2b03      	cmp	r3, #3
 8002290:	d107      	bne.n	80022a2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022a0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022be:	3b01      	subs	r3, #1
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f47f aeb6 	bne.w	800204a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2220      	movs	r2, #32
 80022e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	e000      	b.n	80022fc <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80022fa:	2302      	movs	r3, #2
  }
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3728      	adds	r7, #40	@ 0x28
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	00010004 	.word	0x00010004

08002308 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af02      	add	r7, sp, #8
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	607a      	str	r2, [r7, #4]
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	460b      	mov	r3, r1
 8002316:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800231c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2b08      	cmp	r3, #8
 8002322:	d006      	beq.n	8002332 <I2C_MasterRequestWrite+0x2a>
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d003      	beq.n	8002332 <I2C_MasterRequestWrite+0x2a>
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002330:	d108      	bne.n	8002344 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	e00b      	b.n	800235c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002348:	2b12      	cmp	r3, #18
 800234a:	d107      	bne.n	800235c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800235a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f000 f91d 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00d      	beq.n	8002390 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800237e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002382:	d103      	bne.n	800238c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800238a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e035      	b.n	80023fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002398:	d108      	bne.n	80023ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800239a:	897b      	ldrh	r3, [r7, #10]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80023a8:	611a      	str	r2, [r3, #16]
 80023aa:	e01b      	b.n	80023e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80023ac:	897b      	ldrh	r3, [r7, #10]
 80023ae:	11db      	asrs	r3, r3, #7
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	f003 0306 	and.w	r3, r3, #6
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	f063 030f 	orn	r3, r3, #15
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	490e      	ldr	r1, [pc, #56]	@ (8002404 <I2C_MasterRequestWrite+0xfc>)
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 f966 	bl	800269c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e010      	b.n	80023fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023da:	897b      	ldrh	r3, [r7, #10]
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	4907      	ldr	r1, [pc, #28]	@ (8002408 <I2C_MasterRequestWrite+0x100>)
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 f956 	bl	800269c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	00010008 	.word	0x00010008
 8002408:	00010002 	.word	0x00010002

0800240c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af02      	add	r7, sp, #8
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	460b      	mov	r3, r1
 800241a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002420:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002430:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2b08      	cmp	r3, #8
 8002436:	d006      	beq.n	8002446 <I2C_MasterRequestRead+0x3a>
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d003      	beq.n	8002446 <I2C_MasterRequestRead+0x3a>
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002444:	d108      	bne.n	8002458 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	e00b      	b.n	8002470 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245c:	2b11      	cmp	r3, #17
 800245e:	d107      	bne.n	8002470 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800246e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f893 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00d      	beq.n	80024a4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002492:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002496:	d103      	bne.n	80024a0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800249e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e079      	b.n	8002598 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80024ac:	d108      	bne.n	80024c0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80024ae:	897b      	ldrh	r3, [r7, #10]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	611a      	str	r2, [r3, #16]
 80024be:	e05f      	b.n	8002580 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024c0:	897b      	ldrh	r3, [r7, #10]
 80024c2:	11db      	asrs	r3, r3, #7
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	f003 0306 	and.w	r3, r3, #6
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	f063 030f 	orn	r3, r3, #15
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	4930      	ldr	r1, [pc, #192]	@ (80025a0 <I2C_MasterRequestRead+0x194>)
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 f8dc 	bl	800269c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e054      	b.n	8002598 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024ee:	897b      	ldrh	r3, [r7, #10]
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	4929      	ldr	r1, [pc, #164]	@ (80025a4 <I2C_MasterRequestRead+0x198>)
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 f8cc 	bl	800269c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e044      	b.n	8002598 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	613b      	str	r3, [r7, #16]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002532:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 f831 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00d      	beq.n	8002568 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002556:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800255a:	d103      	bne.n	8002564 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002562:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e017      	b.n	8002598 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002568:	897b      	ldrh	r3, [r7, #10]
 800256a:	11db      	asrs	r3, r3, #7
 800256c:	b2db      	uxtb	r3, r3
 800256e:	f003 0306 	and.w	r3, r3, #6
 8002572:	b2db      	uxtb	r3, r3
 8002574:	f063 030e 	orn	r3, r3, #14
 8002578:	b2da      	uxtb	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	4907      	ldr	r1, [pc, #28]	@ (80025a4 <I2C_MasterRequestRead+0x198>)
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f888 	bl	800269c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	00010008 	.word	0x00010008
 80025a4:	00010002 	.word	0x00010002

080025a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	4613      	mov	r3, r2
 80025b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025b8:	e048      	b.n	800264c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025c0:	d044      	beq.n	800264c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025c2:	f7fe ff69 	bl	8001498 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d302      	bcc.n	80025d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d139      	bne.n	800264c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	0c1b      	lsrs	r3, r3, #16
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d10d      	bne.n	80025fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	43da      	mvns	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	4013      	ands	r3, r2
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bf0c      	ite	eq
 80025f4:	2301      	moveq	r3, #1
 80025f6:	2300      	movne	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	e00c      	b.n	8002618 <I2C_WaitOnFlagUntilTimeout+0x70>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	43da      	mvns	r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	4013      	ands	r3, r2
 800260a:	b29b      	uxth	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	bf0c      	ite	eq
 8002610:	2301      	moveq	r3, #1
 8002612:	2300      	movne	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	461a      	mov	r2, r3
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	429a      	cmp	r2, r3
 800261c:	d116      	bne.n	800264c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002638:	f043 0220 	orr.w	r2, r3, #32
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e023      	b.n	8002694 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	0c1b      	lsrs	r3, r3, #16
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b01      	cmp	r3, #1
 8002654:	d10d      	bne.n	8002672 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	43da      	mvns	r2, r3
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	4013      	ands	r3, r2
 8002662:	b29b      	uxth	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	bf0c      	ite	eq
 8002668:	2301      	moveq	r3, #1
 800266a:	2300      	movne	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	461a      	mov	r2, r3
 8002670:	e00c      	b.n	800268c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	43da      	mvns	r2, r3
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	4013      	ands	r3, r2
 800267e:	b29b      	uxth	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	bf0c      	ite	eq
 8002684:	2301      	moveq	r3, #1
 8002686:	2300      	movne	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	429a      	cmp	r2, r3
 8002690:	d093      	beq.n	80025ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
 80026a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026aa:	e071      	b.n	8002790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026ba:	d123      	bne.n	8002704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80026d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f0:	f043 0204 	orr.w	r2, r3, #4
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e067      	b.n	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800270a:	d041      	beq.n	8002790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800270c:	f7fe fec4 	bl	8001498 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	429a      	cmp	r2, r3
 800271a:	d302      	bcc.n	8002722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d136      	bne.n	8002790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	0c1b      	lsrs	r3, r3, #16
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b01      	cmp	r3, #1
 800272a:	d10c      	bne.n	8002746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	43da      	mvns	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	4013      	ands	r3, r2
 8002738:	b29b      	uxth	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	bf14      	ite	ne
 800273e:	2301      	movne	r3, #1
 8002740:	2300      	moveq	r3, #0
 8002742:	b2db      	uxtb	r3, r3
 8002744:	e00b      	b.n	800275e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	43da      	mvns	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	4013      	ands	r3, r2
 8002752:	b29b      	uxth	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	bf14      	ite	ne
 8002758:	2301      	movne	r3, #1
 800275a:	2300      	moveq	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d016      	beq.n	8002790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277c:	f043 0220 	orr.w	r2, r3, #32
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e021      	b.n	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	0c1b      	lsrs	r3, r3, #16
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b01      	cmp	r3, #1
 8002798:	d10c      	bne.n	80027b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	43da      	mvns	r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	4013      	ands	r3, r2
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	bf14      	ite	ne
 80027ac:	2301      	movne	r3, #1
 80027ae:	2300      	moveq	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	e00b      	b.n	80027cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	43da      	mvns	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4013      	ands	r3, r2
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	bf14      	ite	ne
 80027c6:	2301      	movne	r3, #1
 80027c8:	2300      	moveq	r3, #0
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f47f af6d 	bne.w	80026ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027e8:	e034      	b.n	8002854 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 f8e3 	bl	80029b6 <I2C_IsAcknowledgeFailed>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e034      	b.n	8002864 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002800:	d028      	beq.n	8002854 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002802:	f7fe fe49 	bl	8001498 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	429a      	cmp	r2, r3
 8002810:	d302      	bcc.n	8002818 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d11d      	bne.n	8002854 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002822:	2b80      	cmp	r3, #128	@ 0x80
 8002824:	d016      	beq.n	8002854 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002840:	f043 0220 	orr.w	r2, r3, #32
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e007      	b.n	8002864 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800285e:	2b80      	cmp	r3, #128	@ 0x80
 8002860:	d1c3      	bne.n	80027ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002878:	e034      	b.n	80028e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 f89b 	bl	80029b6 <I2C_IsAcknowledgeFailed>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e034      	b.n	80028f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002890:	d028      	beq.n	80028e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002892:	f7fe fe01 	bl	8001498 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d302      	bcc.n	80028a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d11d      	bne.n	80028e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d016      	beq.n	80028e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d0:	f043 0220 	orr.w	r2, r3, #32
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e007      	b.n	80028f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d1c3      	bne.n	800287a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002908:	e049      	b.n	800299e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	2b10      	cmp	r3, #16
 8002916:	d119      	bne.n	800294c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f06f 0210 	mvn.w	r2, #16
 8002920:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2220      	movs	r2, #32
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e030      	b.n	80029ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294c:	f7fe fda4 	bl	8001498 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	429a      	cmp	r2, r3
 800295a:	d302      	bcc.n	8002962 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d11d      	bne.n	800299e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800296c:	2b40      	cmp	r3, #64	@ 0x40
 800296e:	d016      	beq.n	800299e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2220      	movs	r2, #32
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	f043 0220 	orr.w	r2, r3, #32
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e007      	b.n	80029ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a8:	2b40      	cmp	r3, #64	@ 0x40
 80029aa:	d1ae      	bne.n	800290a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029cc:	d11b      	bne.n	8002a06 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80029d6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2220      	movs	r2, #32
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	f043 0204 	orr.w	r2, r3, #4
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0cc      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a28:	4b68      	ldr	r3, [pc, #416]	@ (8002bcc <HAL_RCC_ClockConfig+0x1b8>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 030f 	and.w	r3, r3, #15
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d90c      	bls.n	8002a50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a36:	4b65      	ldr	r3, [pc, #404]	@ (8002bcc <HAL_RCC_ClockConfig+0x1b8>)
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3e:	4b63      	ldr	r3, [pc, #396]	@ (8002bcc <HAL_RCC_ClockConfig+0x1b8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d001      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0b8      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d020      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a68:	4b59      	ldr	r3, [pc, #356]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	4a58      	ldr	r2, [pc, #352]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a80:	4b53      	ldr	r3, [pc, #332]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	4a52      	ldr	r2, [pc, #328]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a8c:	4b50      	ldr	r3, [pc, #320]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	494d      	ldr	r1, [pc, #308]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d044      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d107      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab2:	4b47      	ldr	r3, [pc, #284]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d119      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e07f      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d003      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ace:	2b03      	cmp	r3, #3
 8002ad0:	d107      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad2:	4b3f      	ldr	r3, [pc, #252]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d109      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e06f      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae2:	4b3b      	ldr	r3, [pc, #236]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e067      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002af2:	4b37      	ldr	r3, [pc, #220]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f023 0203 	bic.w	r2, r3, #3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	4934      	ldr	r1, [pc, #208]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b04:	f7fe fcc8 	bl	8001498 <HAL_GetTick>
 8002b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0a:	e00a      	b.n	8002b22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b0c:	f7fe fcc4 	bl	8001498 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e04f      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b22:	4b2b      	ldr	r3, [pc, #172]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 020c 	and.w	r2, r3, #12
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d1eb      	bne.n	8002b0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b34:	4b25      	ldr	r3, [pc, #148]	@ (8002bcc <HAL_RCC_ClockConfig+0x1b8>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 030f 	and.w	r3, r3, #15
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d20c      	bcs.n	8002b5c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b42:	4b22      	ldr	r3, [pc, #136]	@ (8002bcc <HAL_RCC_ClockConfig+0x1b8>)
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4a:	4b20      	ldr	r3, [pc, #128]	@ (8002bcc <HAL_RCC_ClockConfig+0x1b8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d001      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e032      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d008      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b68:	4b19      	ldr	r3, [pc, #100]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	4916      	ldr	r1, [pc, #88]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d009      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b86:	4b12      	ldr	r3, [pc, #72]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	490e      	ldr	r1, [pc, #56]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b9a:	f000 f855 	bl	8002c48 <HAL_RCC_GetSysClockFreq>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	091b      	lsrs	r3, r3, #4
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	490a      	ldr	r1, [pc, #40]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002bac:	5ccb      	ldrb	r3, [r1, r3]
 8002bae:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb2:	4a09      	ldr	r2, [pc, #36]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002bb6:	4b09      	ldr	r3, [pc, #36]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe fc28 	bl	8001410 <HAL_InitTick>

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40023c00 	.word	0x40023c00
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	08004784 	.word	0x08004784
 8002bd8:	20000010 	.word	0x20000010
 8002bdc:	20000014 	.word	0x20000014

08002be0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002be4:	4b03      	ldr	r3, [pc, #12]	@ (8002bf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002be6:	681b      	ldr	r3, [r3, #0]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	20000010 	.word	0x20000010

08002bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bfc:	f7ff fff0 	bl	8002be0 <HAL_RCC_GetHCLKFreq>
 8002c00:	4602      	mov	r2, r0
 8002c02:	4b05      	ldr	r3, [pc, #20]	@ (8002c18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	0a9b      	lsrs	r3, r3, #10
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	4903      	ldr	r1, [pc, #12]	@ (8002c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c0e:	5ccb      	ldrb	r3, [r1, r3]
 8002c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	08004794 	.word	0x08004794

08002c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c24:	f7ff ffdc 	bl	8002be0 <HAL_RCC_GetHCLKFreq>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	4b05      	ldr	r3, [pc, #20]	@ (8002c40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	0b5b      	lsrs	r3, r3, #13
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	4903      	ldr	r1, [pc, #12]	@ (8002c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c36:	5ccb      	ldrb	r3, [r1, r3]
 8002c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40023800 	.word	0x40023800
 8002c44:	08004794 	.word	0x08004794

08002c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c4c:	b0ae      	sub	sp, #184	@ 0xb8
 8002c4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c6e:	4bcb      	ldr	r3, [pc, #812]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 030c 	and.w	r3, r3, #12
 8002c76:	2b0c      	cmp	r3, #12
 8002c78:	f200 8206 	bhi.w	8003088 <HAL_RCC_GetSysClockFreq+0x440>
 8002c7c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c84 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c82:	bf00      	nop
 8002c84:	08002cb9 	.word	0x08002cb9
 8002c88:	08003089 	.word	0x08003089
 8002c8c:	08003089 	.word	0x08003089
 8002c90:	08003089 	.word	0x08003089
 8002c94:	08002cc1 	.word	0x08002cc1
 8002c98:	08003089 	.word	0x08003089
 8002c9c:	08003089 	.word	0x08003089
 8002ca0:	08003089 	.word	0x08003089
 8002ca4:	08002cc9 	.word	0x08002cc9
 8002ca8:	08003089 	.word	0x08003089
 8002cac:	08003089 	.word	0x08003089
 8002cb0:	08003089 	.word	0x08003089
 8002cb4:	08002eb9 	.word	0x08002eb9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cb8:	4bb9      	ldr	r3, [pc, #740]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002cba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002cbe:	e1e7      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cc0:	4bb8      	ldr	r3, [pc, #736]	@ (8002fa4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002cc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002cc6:	e1e3      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cc8:	4bb4      	ldr	r3, [pc, #720]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x354>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cd4:	4bb1      	ldr	r3, [pc, #708]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x354>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d071      	beq.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce0:	4bae      	ldr	r3, [pc, #696]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x354>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	099b      	lsrs	r3, r3, #6
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002cec:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002cf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002d02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d06:	4622      	mov	r2, r4
 8002d08:	462b      	mov	r3, r5
 8002d0a:	f04f 0000 	mov.w	r0, #0
 8002d0e:	f04f 0100 	mov.w	r1, #0
 8002d12:	0159      	lsls	r1, r3, #5
 8002d14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d18:	0150      	lsls	r0, r2, #5
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4621      	mov	r1, r4
 8002d20:	1a51      	subs	r1, r2, r1
 8002d22:	6439      	str	r1, [r7, #64]	@ 0x40
 8002d24:	4629      	mov	r1, r5
 8002d26:	eb63 0301 	sbc.w	r3, r3, r1
 8002d2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002d38:	4649      	mov	r1, r9
 8002d3a:	018b      	lsls	r3, r1, #6
 8002d3c:	4641      	mov	r1, r8
 8002d3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d42:	4641      	mov	r1, r8
 8002d44:	018a      	lsls	r2, r1, #6
 8002d46:	4641      	mov	r1, r8
 8002d48:	1a51      	subs	r1, r2, r1
 8002d4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002d4c:	4649      	mov	r1, r9
 8002d4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002d60:	4649      	mov	r1, r9
 8002d62:	00cb      	lsls	r3, r1, #3
 8002d64:	4641      	mov	r1, r8
 8002d66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d6a:	4641      	mov	r1, r8
 8002d6c:	00ca      	lsls	r2, r1, #3
 8002d6e:	4610      	mov	r0, r2
 8002d70:	4619      	mov	r1, r3
 8002d72:	4603      	mov	r3, r0
 8002d74:	4622      	mov	r2, r4
 8002d76:	189b      	adds	r3, r3, r2
 8002d78:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d7a:	462b      	mov	r3, r5
 8002d7c:	460a      	mov	r2, r1
 8002d7e:	eb42 0303 	adc.w	r3, r2, r3
 8002d82:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	f04f 0300 	mov.w	r3, #0
 8002d8c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d90:	4629      	mov	r1, r5
 8002d92:	024b      	lsls	r3, r1, #9
 8002d94:	4621      	mov	r1, r4
 8002d96:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d9a:	4621      	mov	r1, r4
 8002d9c:	024a      	lsls	r2, r1, #9
 8002d9e:	4610      	mov	r0, r2
 8002da0:	4619      	mov	r1, r3
 8002da2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002da6:	2200      	movs	r2, #0
 8002da8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002dac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002db0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002db4:	f7fd fa84 	bl	80002c0 <__aeabi_uldivmod>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002dc2:	e067      	b.n	8002e94 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc4:	4b75      	ldr	r3, [pc, #468]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x354>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	099b      	lsrs	r3, r3, #6
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002dd0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002dd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ddc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002dde:	2300      	movs	r3, #0
 8002de0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002de2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002de6:	4622      	mov	r2, r4
 8002de8:	462b      	mov	r3, r5
 8002dea:	f04f 0000 	mov.w	r0, #0
 8002dee:	f04f 0100 	mov.w	r1, #0
 8002df2:	0159      	lsls	r1, r3, #5
 8002df4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002df8:	0150      	lsls	r0, r2, #5
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4621      	mov	r1, r4
 8002e00:	1a51      	subs	r1, r2, r1
 8002e02:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002e04:	4629      	mov	r1, r5
 8002e06:	eb63 0301 	sbc.w	r3, r3, r1
 8002e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002e18:	4649      	mov	r1, r9
 8002e1a:	018b      	lsls	r3, r1, #6
 8002e1c:	4641      	mov	r1, r8
 8002e1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e22:	4641      	mov	r1, r8
 8002e24:	018a      	lsls	r2, r1, #6
 8002e26:	4641      	mov	r1, r8
 8002e28:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e2c:	4649      	mov	r1, r9
 8002e2e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	f04f 0300 	mov.w	r3, #0
 8002e3a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e3e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e46:	4692      	mov	sl, r2
 8002e48:	469b      	mov	fp, r3
 8002e4a:	4623      	mov	r3, r4
 8002e4c:	eb1a 0303 	adds.w	r3, sl, r3
 8002e50:	623b      	str	r3, [r7, #32]
 8002e52:	462b      	mov	r3, r5
 8002e54:	eb4b 0303 	adc.w	r3, fp, r3
 8002e58:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	f04f 0300 	mov.w	r3, #0
 8002e62:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002e66:	4629      	mov	r1, r5
 8002e68:	028b      	lsls	r3, r1, #10
 8002e6a:	4621      	mov	r1, r4
 8002e6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e70:	4621      	mov	r1, r4
 8002e72:	028a      	lsls	r2, r1, #10
 8002e74:	4610      	mov	r0, r2
 8002e76:	4619      	mov	r1, r3
 8002e78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e80:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e82:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002e86:	f7fd fa1b 	bl	80002c0 <__aeabi_uldivmod>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	4613      	mov	r3, r2
 8002e90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e94:	4b41      	ldr	r3, [pc, #260]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x354>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	0c1b      	lsrs	r3, r3, #16
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002ea6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002eaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002eb6:	e0eb      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb8:	4b38      	ldr	r3, [pc, #224]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x354>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ec0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ec4:	4b35      	ldr	r3, [pc, #212]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x354>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d06b      	beq.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed0:	4b32      	ldr	r3, [pc, #200]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x354>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	099b      	lsrs	r3, r3, #6
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002eda:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002edc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee2:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ee8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002eec:	4622      	mov	r2, r4
 8002eee:	462b      	mov	r3, r5
 8002ef0:	f04f 0000 	mov.w	r0, #0
 8002ef4:	f04f 0100 	mov.w	r1, #0
 8002ef8:	0159      	lsls	r1, r3, #5
 8002efa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002efe:	0150      	lsls	r0, r2, #5
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4621      	mov	r1, r4
 8002f06:	1a51      	subs	r1, r2, r1
 8002f08:	61b9      	str	r1, [r7, #24]
 8002f0a:	4629      	mov	r1, r5
 8002f0c:	eb63 0301 	sbc.w	r3, r3, r1
 8002f10:	61fb      	str	r3, [r7, #28]
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002f1e:	4659      	mov	r1, fp
 8002f20:	018b      	lsls	r3, r1, #6
 8002f22:	4651      	mov	r1, sl
 8002f24:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f28:	4651      	mov	r1, sl
 8002f2a:	018a      	lsls	r2, r1, #6
 8002f2c:	4651      	mov	r1, sl
 8002f2e:	ebb2 0801 	subs.w	r8, r2, r1
 8002f32:	4659      	mov	r1, fp
 8002f34:	eb63 0901 	sbc.w	r9, r3, r1
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f44:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f48:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f4c:	4690      	mov	r8, r2
 8002f4e:	4699      	mov	r9, r3
 8002f50:	4623      	mov	r3, r4
 8002f52:	eb18 0303 	adds.w	r3, r8, r3
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	462b      	mov	r3, r5
 8002f5a:	eb49 0303 	adc.w	r3, r9, r3
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002f6c:	4629      	mov	r1, r5
 8002f6e:	024b      	lsls	r3, r1, #9
 8002f70:	4621      	mov	r1, r4
 8002f72:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f76:	4621      	mov	r1, r4
 8002f78:	024a      	lsls	r2, r1, #9
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f82:	2200      	movs	r2, #0
 8002f84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002f86:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002f88:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f8c:	f7fd f998 	bl	80002c0 <__aeabi_uldivmod>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	4613      	mov	r3, r2
 8002f96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f9a:	e065      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0x420>
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	00f42400 	.word	0x00f42400
 8002fa4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa8:	4b3d      	ldr	r3, [pc, #244]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	099b      	lsrs	r3, r3, #6
 8002fae:	2200      	movs	r2, #0
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fb8:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fba:	2300      	movs	r3, #0
 8002fbc:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fbe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002fc2:	4642      	mov	r2, r8
 8002fc4:	464b      	mov	r3, r9
 8002fc6:	f04f 0000 	mov.w	r0, #0
 8002fca:	f04f 0100 	mov.w	r1, #0
 8002fce:	0159      	lsls	r1, r3, #5
 8002fd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fd4:	0150      	lsls	r0, r2, #5
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4641      	mov	r1, r8
 8002fdc:	1a51      	subs	r1, r2, r1
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	4649      	mov	r1, r9
 8002fe2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002ff4:	4659      	mov	r1, fp
 8002ff6:	018b      	lsls	r3, r1, #6
 8002ff8:	4651      	mov	r1, sl
 8002ffa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ffe:	4651      	mov	r1, sl
 8003000:	018a      	lsls	r2, r1, #6
 8003002:	4651      	mov	r1, sl
 8003004:	1a54      	subs	r4, r2, r1
 8003006:	4659      	mov	r1, fp
 8003008:	eb63 0501 	sbc.w	r5, r3, r1
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	00eb      	lsls	r3, r5, #3
 8003016:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800301a:	00e2      	lsls	r2, r4, #3
 800301c:	4614      	mov	r4, r2
 800301e:	461d      	mov	r5, r3
 8003020:	4643      	mov	r3, r8
 8003022:	18e3      	adds	r3, r4, r3
 8003024:	603b      	str	r3, [r7, #0]
 8003026:	464b      	mov	r3, r9
 8003028:	eb45 0303 	adc.w	r3, r5, r3
 800302c:	607b      	str	r3, [r7, #4]
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	f04f 0300 	mov.w	r3, #0
 8003036:	e9d7 4500 	ldrd	r4, r5, [r7]
 800303a:	4629      	mov	r1, r5
 800303c:	028b      	lsls	r3, r1, #10
 800303e:	4621      	mov	r1, r4
 8003040:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003044:	4621      	mov	r1, r4
 8003046:	028a      	lsls	r2, r1, #10
 8003048:	4610      	mov	r0, r2
 800304a:	4619      	mov	r1, r3
 800304c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003050:	2200      	movs	r2, #0
 8003052:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003054:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003056:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800305a:	f7fd f931 	bl	80002c0 <__aeabi_uldivmod>
 800305e:	4602      	mov	r2, r0
 8003060:	460b      	mov	r3, r1
 8003062:	4613      	mov	r3, r2
 8003064:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003068:	4b0d      	ldr	r3, [pc, #52]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x458>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	0f1b      	lsrs	r3, r3, #28
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003076:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800307a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800307e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003082:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003086:	e003      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003088:	4b06      	ldr	r3, [pc, #24]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800308a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800308e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003090:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003094:	4618      	mov	r0, r3
 8003096:	37b8      	adds	r7, #184	@ 0xb8
 8003098:	46bd      	mov	sp, r7
 800309a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800309e:	bf00      	nop
 80030a0:	40023800 	.word	0x40023800
 80030a4:	00f42400 	.word	0x00f42400

080030a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e28d      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 8083 	beq.w	80031ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80030c8:	4b94      	ldr	r3, [pc, #592]	@ (800331c <HAL_RCC_OscConfig+0x274>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 030c 	and.w	r3, r3, #12
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d019      	beq.n	8003108 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80030d4:	4b91      	ldr	r3, [pc, #580]	@ (800331c <HAL_RCC_OscConfig+0x274>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 030c 	and.w	r3, r3, #12
        || \
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d106      	bne.n	80030ee <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80030e0:	4b8e      	ldr	r3, [pc, #568]	@ (800331c <HAL_RCC_OscConfig+0x274>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030ec:	d00c      	beq.n	8003108 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ee:	4b8b      	ldr	r3, [pc, #556]	@ (800331c <HAL_RCC_OscConfig+0x274>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80030f6:	2b0c      	cmp	r3, #12
 80030f8:	d112      	bne.n	8003120 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030fa:	4b88      	ldr	r3, [pc, #544]	@ (800331c <HAL_RCC_OscConfig+0x274>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003102:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003106:	d10b      	bne.n	8003120 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003108:	4b84      	ldr	r3, [pc, #528]	@ (800331c <HAL_RCC_OscConfig+0x274>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d05b      	beq.n	80031cc <HAL_RCC_OscConfig+0x124>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d157      	bne.n	80031cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e25a      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003128:	d106      	bne.n	8003138 <HAL_RCC_OscConfig+0x90>
 800312a:	4b7c      	ldr	r3, [pc, #496]	@ (800331c <HAL_RCC_OscConfig+0x274>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a7b      	ldr	r2, [pc, #492]	@ (800331c <HAL_RCC_OscConfig+0x274>)
 8003130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	e01d      	b.n	8003174 <HAL_RCC_OscConfig+0xcc>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003140:	d10c      	bne.n	800315c <HAL_RCC_OscConfig+0xb4>
 8003142:	4b76      	ldr	r3, [pc, #472]	@ (800331c <HAL_RCC_OscConfig+0x274>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a75      	ldr	r2, [pc, #468]	@ (800331c <HAL_RCC_OscConfig+0x274>)
 8003148:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	4b73      	ldr	r3, [pc, #460]	@ (800331c <HAL_RCC_OscConfig+0x274>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a72      	ldr	r2, [pc, #456]	@ (800331c <HAL_RCC_OscConfig+0x274>)
 8003154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	e00b      	b.n	8003174 <HAL_RCC_OscConfig+0xcc>
 800315c:	4b6f      	ldr	r3, [pc, #444]	@ (800331c <HAL_RCC_OscConfig+0x274>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a6e      	ldr	r2, [pc, #440]	@ (800331c <HAL_RCC_OscConfig+0x274>)
 8003162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003166:	6013      	str	r3, [r2, #0]
 8003168:	4b6c      	ldr	r3, [pc, #432]	@ (800331c <HAL_RCC_OscConfig+0x274>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a6b      	ldr	r2, [pc, #428]	@ (800331c <HAL_RCC_OscConfig+0x274>)
 800316e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d013      	beq.n	80031a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317c:	f7fe f98c 	bl	8001498 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003184:	f7fe f988 	bl	8001498 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b64      	cmp	r3, #100	@ 0x64
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e21f      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003196:	4b61      	ldr	r3, [pc, #388]	@ (800331c <HAL_RCC_OscConfig+0x274>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0f0      	beq.n	8003184 <HAL_RCC_OscConfig+0xdc>
 80031a2:	e014      	b.n	80031ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a4:	f7fe f978 	bl	8001498 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031ac:	f7fe f974 	bl	8001498 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b64      	cmp	r3, #100	@ 0x64
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e20b      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031be:	4b57      	ldr	r3, [pc, #348]	@ (800331c <HAL_RCC_OscConfig+0x274>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0x104>
 80031ca:	e000      	b.n	80031ce <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d06f      	beq.n	80032ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80031da:	4b50      	ldr	r3, [pc, #320]	@ (800331c <HAL_RCC_OscConfig+0x274>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d017      	beq.n	8003216 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80031e6:	4b4d      	ldr	r3, [pc, #308]	@ (800331c <HAL_RCC_OscConfig+0x274>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 030c 	and.w	r3, r3, #12
        || \
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d105      	bne.n	80031fe <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80031f2:	4b4a      	ldr	r3, [pc, #296]	@ (800331c <HAL_RCC_OscConfig+0x274>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00b      	beq.n	8003216 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031fe:	4b47      	ldr	r3, [pc, #284]	@ (800331c <HAL_RCC_OscConfig+0x274>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003206:	2b0c      	cmp	r3, #12
 8003208:	d11c      	bne.n	8003244 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800320a:	4b44      	ldr	r3, [pc, #272]	@ (800331c <HAL_RCC_OscConfig+0x274>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d116      	bne.n	8003244 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003216:	4b41      	ldr	r3, [pc, #260]	@ (800331c <HAL_RCC_OscConfig+0x274>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d005      	beq.n	800322e <HAL_RCC_OscConfig+0x186>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d001      	beq.n	800322e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e1d3      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800322e:	4b3b      	ldr	r3, [pc, #236]	@ (800331c <HAL_RCC_OscConfig+0x274>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	4937      	ldr	r1, [pc, #220]	@ (800331c <HAL_RCC_OscConfig+0x274>)
 800323e:	4313      	orrs	r3, r2
 8003240:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003242:	e03a      	b.n	80032ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d020      	beq.n	800328e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800324c:	4b34      	ldr	r3, [pc, #208]	@ (8003320 <HAL_RCC_OscConfig+0x278>)
 800324e:	2201      	movs	r2, #1
 8003250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003252:	f7fe f921 	bl	8001498 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800325a:	f7fe f91d 	bl	8001498 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e1b4      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800326c:	4b2b      	ldr	r3, [pc, #172]	@ (800331c <HAL_RCC_OscConfig+0x274>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0f0      	beq.n	800325a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003278:	4b28      	ldr	r3, [pc, #160]	@ (800331c <HAL_RCC_OscConfig+0x274>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	4925      	ldr	r1, [pc, #148]	@ (800331c <HAL_RCC_OscConfig+0x274>)
 8003288:	4313      	orrs	r3, r2
 800328a:	600b      	str	r3, [r1, #0]
 800328c:	e015      	b.n	80032ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800328e:	4b24      	ldr	r3, [pc, #144]	@ (8003320 <HAL_RCC_OscConfig+0x278>)
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003294:	f7fe f900 	bl	8001498 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800329c:	f7fe f8fc 	bl	8001498 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e193      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ae:	4b1b      	ldr	r3, [pc, #108]	@ (800331c <HAL_RCC_OscConfig+0x274>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d036      	beq.n	8003334 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d016      	beq.n	80032fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ce:	4b15      	ldr	r3, [pc, #84]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 80032d0:	2201      	movs	r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d4:	f7fe f8e0 	bl	8001498 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032dc:	f7fe f8dc 	bl	8001498 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e173      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ee:	4b0b      	ldr	r3, [pc, #44]	@ (800331c <HAL_RCC_OscConfig+0x274>)
 80032f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f0      	beq.n	80032dc <HAL_RCC_OscConfig+0x234>
 80032fa:	e01b      	b.n	8003334 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032fc:	4b09      	ldr	r3, [pc, #36]	@ (8003324 <HAL_RCC_OscConfig+0x27c>)
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003302:	f7fe f8c9 	bl	8001498 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003308:	e00e      	b.n	8003328 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800330a:	f7fe f8c5 	bl	8001498 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d907      	bls.n	8003328 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e15c      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
 800331c:	40023800 	.word	0x40023800
 8003320:	42470000 	.word	0x42470000
 8003324:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003328:	4b8a      	ldr	r3, [pc, #552]	@ (8003554 <HAL_RCC_OscConfig+0x4ac>)
 800332a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1ea      	bne.n	800330a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 8097 	beq.w	8003470 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003342:	2300      	movs	r3, #0
 8003344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003346:	4b83      	ldr	r3, [pc, #524]	@ (8003554 <HAL_RCC_OscConfig+0x4ac>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10f      	bne.n	8003372 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	4b7f      	ldr	r3, [pc, #508]	@ (8003554 <HAL_RCC_OscConfig+0x4ac>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	4a7e      	ldr	r2, [pc, #504]	@ (8003554 <HAL_RCC_OscConfig+0x4ac>)
 800335c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003360:	6413      	str	r3, [r2, #64]	@ 0x40
 8003362:	4b7c      	ldr	r3, [pc, #496]	@ (8003554 <HAL_RCC_OscConfig+0x4ac>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800336a:	60bb      	str	r3, [r7, #8]
 800336c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800336e:	2301      	movs	r3, #1
 8003370:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003372:	4b79      	ldr	r3, [pc, #484]	@ (8003558 <HAL_RCC_OscConfig+0x4b0>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800337a:	2b00      	cmp	r3, #0
 800337c:	d118      	bne.n	80033b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800337e:	4b76      	ldr	r3, [pc, #472]	@ (8003558 <HAL_RCC_OscConfig+0x4b0>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a75      	ldr	r2, [pc, #468]	@ (8003558 <HAL_RCC_OscConfig+0x4b0>)
 8003384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800338a:	f7fe f885 	bl	8001498 <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003392:	f7fe f881 	bl	8001498 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e118      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a4:	4b6c      	ldr	r3, [pc, #432]	@ (8003558 <HAL_RCC_OscConfig+0x4b0>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0f0      	beq.n	8003392 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d106      	bne.n	80033c6 <HAL_RCC_OscConfig+0x31e>
 80033b8:	4b66      	ldr	r3, [pc, #408]	@ (8003554 <HAL_RCC_OscConfig+0x4ac>)
 80033ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033bc:	4a65      	ldr	r2, [pc, #404]	@ (8003554 <HAL_RCC_OscConfig+0x4ac>)
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80033c4:	e01c      	b.n	8003400 <HAL_RCC_OscConfig+0x358>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b05      	cmp	r3, #5
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x340>
 80033ce:	4b61      	ldr	r3, [pc, #388]	@ (8003554 <HAL_RCC_OscConfig+0x4ac>)
 80033d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d2:	4a60      	ldr	r2, [pc, #384]	@ (8003554 <HAL_RCC_OscConfig+0x4ac>)
 80033d4:	f043 0304 	orr.w	r3, r3, #4
 80033d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80033da:	4b5e      	ldr	r3, [pc, #376]	@ (8003554 <HAL_RCC_OscConfig+0x4ac>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033de:	4a5d      	ldr	r2, [pc, #372]	@ (8003554 <HAL_RCC_OscConfig+0x4ac>)
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80033e6:	e00b      	b.n	8003400 <HAL_RCC_OscConfig+0x358>
 80033e8:	4b5a      	ldr	r3, [pc, #360]	@ (8003554 <HAL_RCC_OscConfig+0x4ac>)
 80033ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ec:	4a59      	ldr	r2, [pc, #356]	@ (8003554 <HAL_RCC_OscConfig+0x4ac>)
 80033ee:	f023 0301 	bic.w	r3, r3, #1
 80033f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80033f4:	4b57      	ldr	r3, [pc, #348]	@ (8003554 <HAL_RCC_OscConfig+0x4ac>)
 80033f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f8:	4a56      	ldr	r2, [pc, #344]	@ (8003554 <HAL_RCC_OscConfig+0x4ac>)
 80033fa:	f023 0304 	bic.w	r3, r3, #4
 80033fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d015      	beq.n	8003434 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003408:	f7fe f846 	bl	8001498 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800340e:	e00a      	b.n	8003426 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003410:	f7fe f842 	bl	8001498 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800341e:	4293      	cmp	r3, r2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e0d7      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003426:	4b4b      	ldr	r3, [pc, #300]	@ (8003554 <HAL_RCC_OscConfig+0x4ac>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0ee      	beq.n	8003410 <HAL_RCC_OscConfig+0x368>
 8003432:	e014      	b.n	800345e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003434:	f7fe f830 	bl	8001498 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800343a:	e00a      	b.n	8003452 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800343c:	f7fe f82c 	bl	8001498 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800344a:	4293      	cmp	r3, r2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e0c1      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003452:	4b40      	ldr	r3, [pc, #256]	@ (8003554 <HAL_RCC_OscConfig+0x4ac>)
 8003454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1ee      	bne.n	800343c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800345e:	7dfb      	ldrb	r3, [r7, #23]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d105      	bne.n	8003470 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003464:	4b3b      	ldr	r3, [pc, #236]	@ (8003554 <HAL_RCC_OscConfig+0x4ac>)
 8003466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003468:	4a3a      	ldr	r2, [pc, #232]	@ (8003554 <HAL_RCC_OscConfig+0x4ac>)
 800346a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800346e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 80ad 	beq.w	80035d4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800347a:	4b36      	ldr	r3, [pc, #216]	@ (8003554 <HAL_RCC_OscConfig+0x4ac>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 030c 	and.w	r3, r3, #12
 8003482:	2b08      	cmp	r3, #8
 8003484:	d060      	beq.n	8003548 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d145      	bne.n	800351a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348e:	4b33      	ldr	r3, [pc, #204]	@ (800355c <HAL_RCC_OscConfig+0x4b4>)
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003494:	f7fe f800 	bl	8001498 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349c:	f7fd fffc 	bl	8001498 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e093      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ae:	4b29      	ldr	r3, [pc, #164]	@ (8003554 <HAL_RCC_OscConfig+0x4ac>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69da      	ldr	r2, [r3, #28]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c8:	019b      	lsls	r3, r3, #6
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d0:	085b      	lsrs	r3, r3, #1
 80034d2:	3b01      	subs	r3, #1
 80034d4:	041b      	lsls	r3, r3, #16
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034dc:	061b      	lsls	r3, r3, #24
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e4:	071b      	lsls	r3, r3, #28
 80034e6:	491b      	ldr	r1, [pc, #108]	@ (8003554 <HAL_RCC_OscConfig+0x4ac>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034ec:	4b1b      	ldr	r3, [pc, #108]	@ (800355c <HAL_RCC_OscConfig+0x4b4>)
 80034ee:	2201      	movs	r2, #1
 80034f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f2:	f7fd ffd1 	bl	8001498 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fa:	f7fd ffcd 	bl	8001498 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e064      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800350c:	4b11      	ldr	r3, [pc, #68]	@ (8003554 <HAL_RCC_OscConfig+0x4ac>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0f0      	beq.n	80034fa <HAL_RCC_OscConfig+0x452>
 8003518:	e05c      	b.n	80035d4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351a:	4b10      	ldr	r3, [pc, #64]	@ (800355c <HAL_RCC_OscConfig+0x4b4>)
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003520:	f7fd ffba 	bl	8001498 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003528:	f7fd ffb6 	bl	8001498 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e04d      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800353a:	4b06      	ldr	r3, [pc, #24]	@ (8003554 <HAL_RCC_OscConfig+0x4ac>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f0      	bne.n	8003528 <HAL_RCC_OscConfig+0x480>
 8003546:	e045      	b.n	80035d4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d107      	bne.n	8003560 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e040      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
 8003554:	40023800 	.word	0x40023800
 8003558:	40007000 	.word	0x40007000
 800355c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003560:	4b1f      	ldr	r3, [pc, #124]	@ (80035e0 <HAL_RCC_OscConfig+0x538>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d030      	beq.n	80035d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003578:	429a      	cmp	r2, r3
 800357a:	d129      	bne.n	80035d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003586:	429a      	cmp	r2, r3
 8003588:	d122      	bne.n	80035d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003590:	4013      	ands	r3, r2
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003596:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003598:	4293      	cmp	r3, r2
 800359a:	d119      	bne.n	80035d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a6:	085b      	lsrs	r3, r3, #1
 80035a8:	3b01      	subs	r3, #1
 80035aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d10f      	bne.n	80035d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035bc:	429a      	cmp	r2, r3
 80035be:	d107      	bne.n	80035d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d001      	beq.n	80035d4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e000      	b.n	80035d6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40023800 	.word	0x40023800

080035e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e042      	b.n	800367c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7fd fdd4 	bl	80011b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2224      	movs	r2, #36	@ 0x24
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003626:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f973 	bl	8003914 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800363c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	695a      	ldr	r2, [r3, #20]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800364c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68da      	ldr	r2, [r3, #12]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800365c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2220      	movs	r2, #32
 8003668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08a      	sub	sp, #40	@ 0x28
 8003688:	af02      	add	r7, sp, #8
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	4613      	mov	r3, r2
 8003692:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b20      	cmp	r3, #32
 80036a2:	d175      	bne.n	8003790 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <HAL_UART_Transmit+0x2c>
 80036aa:	88fb      	ldrh	r3, [r7, #6]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e06e      	b.n	8003792 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2221      	movs	r2, #33	@ 0x21
 80036be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036c2:	f7fd fee9 	bl	8001498 <HAL_GetTick>
 80036c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	88fa      	ldrh	r2, [r7, #6]
 80036cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	88fa      	ldrh	r2, [r7, #6]
 80036d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036dc:	d108      	bne.n	80036f0 <HAL_UART_Transmit+0x6c>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d104      	bne.n	80036f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	61bb      	str	r3, [r7, #24]
 80036ee:	e003      	b.n	80036f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036f8:	e02e      	b.n	8003758 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2200      	movs	r2, #0
 8003702:	2180      	movs	r1, #128	@ 0x80
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 f848 	bl	800379a <UART_WaitOnFlagUntilTimeout>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e03a      	b.n	8003792 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10b      	bne.n	800373a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003730:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	3302      	adds	r3, #2
 8003736:	61bb      	str	r3, [r7, #24]
 8003738:	e007      	b.n	800374a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	781a      	ldrb	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	3301      	adds	r3, #1
 8003748:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1cb      	bne.n	80036fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2200      	movs	r2, #0
 800376a:	2140      	movs	r1, #64	@ 0x40
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f814 	bl	800379a <UART_WaitOnFlagUntilTimeout>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e006      	b.n	8003792 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	e000      	b.n	8003792 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003790:	2302      	movs	r3, #2
  }
}
 8003792:	4618      	mov	r0, r3
 8003794:	3720      	adds	r7, #32
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b086      	sub	sp, #24
 800379e:	af00      	add	r7, sp, #0
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	603b      	str	r3, [r7, #0]
 80037a6:	4613      	mov	r3, r2
 80037a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037aa:	e03b      	b.n	8003824 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037b2:	d037      	beq.n	8003824 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b4:	f7fd fe70 	bl	8001498 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	6a3a      	ldr	r2, [r7, #32]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d302      	bcc.n	80037ca <UART_WaitOnFlagUntilTimeout+0x30>
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e03a      	b.n	8003844 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d023      	beq.n	8003824 <UART_WaitOnFlagUntilTimeout+0x8a>
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b80      	cmp	r3, #128	@ 0x80
 80037e0:	d020      	beq.n	8003824 <UART_WaitOnFlagUntilTimeout+0x8a>
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b40      	cmp	r3, #64	@ 0x40
 80037e6:	d01d      	beq.n	8003824 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d116      	bne.n	8003824 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80037f6:	2300      	movs	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f81d 	bl	800384c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2208      	movs	r2, #8
 8003816:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e00f      	b.n	8003844 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	4013      	ands	r3, r2
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	429a      	cmp	r2, r3
 8003832:	bf0c      	ite	eq
 8003834:	2301      	moveq	r3, #1
 8003836:	2300      	movne	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	461a      	mov	r2, r3
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	429a      	cmp	r2, r3
 8003840:	d0b4      	beq.n	80037ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800384c:	b480      	push	{r7}
 800384e:	b095      	sub	sp, #84	@ 0x54
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	330c      	adds	r3, #12
 800385a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800385e:	e853 3f00 	ldrex	r3, [r3]
 8003862:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003866:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800386a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	330c      	adds	r3, #12
 8003872:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003874:	643a      	str	r2, [r7, #64]	@ 0x40
 8003876:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003878:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800387a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800387c:	e841 2300 	strex	r3, r2, [r1]
 8003880:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1e5      	bne.n	8003854 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3314      	adds	r3, #20
 800388e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	e853 3f00 	ldrex	r3, [r3]
 8003896:	61fb      	str	r3, [r7, #28]
   return(result);
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f023 0301 	bic.w	r3, r3, #1
 800389e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3314      	adds	r3, #20
 80038a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038b0:	e841 2300 	strex	r3, r2, [r1]
 80038b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1e5      	bne.n	8003888 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d119      	bne.n	80038f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	330c      	adds	r3, #12
 80038ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	e853 3f00 	ldrex	r3, [r3]
 80038d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f023 0310 	bic.w	r3, r3, #16
 80038da:	647b      	str	r3, [r7, #68]	@ 0x44
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	330c      	adds	r3, #12
 80038e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038e4:	61ba      	str	r2, [r7, #24]
 80038e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e8:	6979      	ldr	r1, [r7, #20]
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	e841 2300 	strex	r3, r2, [r1]
 80038f0:	613b      	str	r3, [r7, #16]
   return(result);
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1e5      	bne.n	80038c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003906:	bf00      	nop
 8003908:	3754      	adds	r7, #84	@ 0x54
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
	...

08003914 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003918:	b0c0      	sub	sp, #256	@ 0x100
 800391a:	af00      	add	r7, sp, #0
 800391c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800392c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003930:	68d9      	ldr	r1, [r3, #12]
 8003932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	ea40 0301 	orr.w	r3, r0, r1
 800393c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800393e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	431a      	orrs	r2, r3
 800394c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	431a      	orrs	r2, r3
 8003954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	4313      	orrs	r3, r2
 800395c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800396c:	f021 010c 	bic.w	r1, r1, #12
 8003970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800397a:	430b      	orrs	r3, r1
 800397c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800397e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800398a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800398e:	6999      	ldr	r1, [r3, #24]
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	ea40 0301 	orr.w	r3, r0, r1
 800399a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800399c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	4b8f      	ldr	r3, [pc, #572]	@ (8003be0 <UART_SetConfig+0x2cc>)
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d005      	beq.n	80039b4 <UART_SetConfig+0xa0>
 80039a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	4b8d      	ldr	r3, [pc, #564]	@ (8003be4 <UART_SetConfig+0x2d0>)
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d104      	bne.n	80039be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039b4:	f7ff f934 	bl	8002c20 <HAL_RCC_GetPCLK2Freq>
 80039b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80039bc:	e003      	b.n	80039c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039be:	f7ff f91b 	bl	8002bf8 <HAL_RCC_GetPCLK1Freq>
 80039c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039d0:	f040 810c 	bne.w	8003bec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039d8:	2200      	movs	r2, #0
 80039da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80039de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80039e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80039e6:	4622      	mov	r2, r4
 80039e8:	462b      	mov	r3, r5
 80039ea:	1891      	adds	r1, r2, r2
 80039ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80039ee:	415b      	adcs	r3, r3
 80039f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80039f6:	4621      	mov	r1, r4
 80039f8:	eb12 0801 	adds.w	r8, r2, r1
 80039fc:	4629      	mov	r1, r5
 80039fe:	eb43 0901 	adc.w	r9, r3, r1
 8003a02:	f04f 0200 	mov.w	r2, #0
 8003a06:	f04f 0300 	mov.w	r3, #0
 8003a0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a16:	4690      	mov	r8, r2
 8003a18:	4699      	mov	r9, r3
 8003a1a:	4623      	mov	r3, r4
 8003a1c:	eb18 0303 	adds.w	r3, r8, r3
 8003a20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a24:	462b      	mov	r3, r5
 8003a26:	eb49 0303 	adc.w	r3, r9, r3
 8003a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a3a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a42:	460b      	mov	r3, r1
 8003a44:	18db      	adds	r3, r3, r3
 8003a46:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a48:	4613      	mov	r3, r2
 8003a4a:	eb42 0303 	adc.w	r3, r2, r3
 8003a4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a58:	f7fc fc32 	bl	80002c0 <__aeabi_uldivmod>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4b61      	ldr	r3, [pc, #388]	@ (8003be8 <UART_SetConfig+0x2d4>)
 8003a62:	fba3 2302 	umull	r2, r3, r3, r2
 8003a66:	095b      	lsrs	r3, r3, #5
 8003a68:	011c      	lsls	r4, r3, #4
 8003a6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a74:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003a78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003a7c:	4642      	mov	r2, r8
 8003a7e:	464b      	mov	r3, r9
 8003a80:	1891      	adds	r1, r2, r2
 8003a82:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003a84:	415b      	adcs	r3, r3
 8003a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a8c:	4641      	mov	r1, r8
 8003a8e:	eb12 0a01 	adds.w	sl, r2, r1
 8003a92:	4649      	mov	r1, r9
 8003a94:	eb43 0b01 	adc.w	fp, r3, r1
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	f04f 0300 	mov.w	r3, #0
 8003aa0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003aa4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003aa8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003aac:	4692      	mov	sl, r2
 8003aae:	469b      	mov	fp, r3
 8003ab0:	4643      	mov	r3, r8
 8003ab2:	eb1a 0303 	adds.w	r3, sl, r3
 8003ab6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003aba:	464b      	mov	r3, r9
 8003abc:	eb4b 0303 	adc.w	r3, fp, r3
 8003ac0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ad0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ad4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	18db      	adds	r3, r3, r3
 8003adc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ade:	4613      	mov	r3, r2
 8003ae0:	eb42 0303 	adc.w	r3, r2, r3
 8003ae4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ae6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003aea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003aee:	f7fc fbe7 	bl	80002c0 <__aeabi_uldivmod>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4611      	mov	r1, r2
 8003af8:	4b3b      	ldr	r3, [pc, #236]	@ (8003be8 <UART_SetConfig+0x2d4>)
 8003afa:	fba3 2301 	umull	r2, r3, r3, r1
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	2264      	movs	r2, #100	@ 0x64
 8003b02:	fb02 f303 	mul.w	r3, r2, r3
 8003b06:	1acb      	subs	r3, r1, r3
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b0e:	4b36      	ldr	r3, [pc, #216]	@ (8003be8 <UART_SetConfig+0x2d4>)
 8003b10:	fba3 2302 	umull	r2, r3, r3, r2
 8003b14:	095b      	lsrs	r3, r3, #5
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b1c:	441c      	add	r4, r3
 8003b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b22:	2200      	movs	r2, #0
 8003b24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b28:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b30:	4642      	mov	r2, r8
 8003b32:	464b      	mov	r3, r9
 8003b34:	1891      	adds	r1, r2, r2
 8003b36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b38:	415b      	adcs	r3, r3
 8003b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b40:	4641      	mov	r1, r8
 8003b42:	1851      	adds	r1, r2, r1
 8003b44:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b46:	4649      	mov	r1, r9
 8003b48:	414b      	adcs	r3, r1
 8003b4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b4c:	f04f 0200 	mov.w	r2, #0
 8003b50:	f04f 0300 	mov.w	r3, #0
 8003b54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b58:	4659      	mov	r1, fp
 8003b5a:	00cb      	lsls	r3, r1, #3
 8003b5c:	4651      	mov	r1, sl
 8003b5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b62:	4651      	mov	r1, sl
 8003b64:	00ca      	lsls	r2, r1, #3
 8003b66:	4610      	mov	r0, r2
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	4642      	mov	r2, r8
 8003b6e:	189b      	adds	r3, r3, r2
 8003b70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b74:	464b      	mov	r3, r9
 8003b76:	460a      	mov	r2, r1
 8003b78:	eb42 0303 	adc.w	r3, r2, r3
 8003b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b8c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003b90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003b94:	460b      	mov	r3, r1
 8003b96:	18db      	adds	r3, r3, r3
 8003b98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	eb42 0303 	adc.w	r3, r2, r3
 8003ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ba2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ba6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003baa:	f7fc fb89 	bl	80002c0 <__aeabi_uldivmod>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003be8 <UART_SetConfig+0x2d4>)
 8003bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8003bb8:	095b      	lsrs	r3, r3, #5
 8003bba:	2164      	movs	r1, #100	@ 0x64
 8003bbc:	fb01 f303 	mul.w	r3, r1, r3
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	3332      	adds	r3, #50	@ 0x32
 8003bc6:	4a08      	ldr	r2, [pc, #32]	@ (8003be8 <UART_SetConfig+0x2d4>)
 8003bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bcc:	095b      	lsrs	r3, r3, #5
 8003bce:	f003 0207 	and.w	r2, r3, #7
 8003bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4422      	add	r2, r4
 8003bda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bdc:	e106      	b.n	8003dec <UART_SetConfig+0x4d8>
 8003bde:	bf00      	nop
 8003be0:	40011000 	.word	0x40011000
 8003be4:	40011400 	.word	0x40011400
 8003be8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003bf6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003bfa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003bfe:	4642      	mov	r2, r8
 8003c00:	464b      	mov	r3, r9
 8003c02:	1891      	adds	r1, r2, r2
 8003c04:	6239      	str	r1, [r7, #32]
 8003c06:	415b      	adcs	r3, r3
 8003c08:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c0e:	4641      	mov	r1, r8
 8003c10:	1854      	adds	r4, r2, r1
 8003c12:	4649      	mov	r1, r9
 8003c14:	eb43 0501 	adc.w	r5, r3, r1
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	00eb      	lsls	r3, r5, #3
 8003c22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c26:	00e2      	lsls	r2, r4, #3
 8003c28:	4614      	mov	r4, r2
 8003c2a:	461d      	mov	r5, r3
 8003c2c:	4643      	mov	r3, r8
 8003c2e:	18e3      	adds	r3, r4, r3
 8003c30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c34:	464b      	mov	r3, r9
 8003c36:	eb45 0303 	adc.w	r3, r5, r3
 8003c3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c4e:	f04f 0200 	mov.w	r2, #0
 8003c52:	f04f 0300 	mov.w	r3, #0
 8003c56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c5a:	4629      	mov	r1, r5
 8003c5c:	008b      	lsls	r3, r1, #2
 8003c5e:	4621      	mov	r1, r4
 8003c60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c64:	4621      	mov	r1, r4
 8003c66:	008a      	lsls	r2, r1, #2
 8003c68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003c6c:	f7fc fb28 	bl	80002c0 <__aeabi_uldivmod>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4b60      	ldr	r3, [pc, #384]	@ (8003df8 <UART_SetConfig+0x4e4>)
 8003c76:	fba3 2302 	umull	r2, r3, r3, r2
 8003c7a:	095b      	lsrs	r3, r3, #5
 8003c7c:	011c      	lsls	r4, r3, #4
 8003c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c82:	2200      	movs	r2, #0
 8003c84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c88:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003c90:	4642      	mov	r2, r8
 8003c92:	464b      	mov	r3, r9
 8003c94:	1891      	adds	r1, r2, r2
 8003c96:	61b9      	str	r1, [r7, #24]
 8003c98:	415b      	adcs	r3, r3
 8003c9a:	61fb      	str	r3, [r7, #28]
 8003c9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ca0:	4641      	mov	r1, r8
 8003ca2:	1851      	adds	r1, r2, r1
 8003ca4:	6139      	str	r1, [r7, #16]
 8003ca6:	4649      	mov	r1, r9
 8003ca8:	414b      	adcs	r3, r1
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cb8:	4659      	mov	r1, fp
 8003cba:	00cb      	lsls	r3, r1, #3
 8003cbc:	4651      	mov	r1, sl
 8003cbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cc2:	4651      	mov	r1, sl
 8003cc4:	00ca      	lsls	r2, r1, #3
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4603      	mov	r3, r0
 8003ccc:	4642      	mov	r2, r8
 8003cce:	189b      	adds	r3, r3, r2
 8003cd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003cd4:	464b      	mov	r3, r9
 8003cd6:	460a      	mov	r2, r1
 8003cd8:	eb42 0303 	adc.w	r3, r2, r3
 8003cdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	f04f 0300 	mov.w	r3, #0
 8003cf4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003cf8:	4649      	mov	r1, r9
 8003cfa:	008b      	lsls	r3, r1, #2
 8003cfc:	4641      	mov	r1, r8
 8003cfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d02:	4641      	mov	r1, r8
 8003d04:	008a      	lsls	r2, r1, #2
 8003d06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d0a:	f7fc fad9 	bl	80002c0 <__aeabi_uldivmod>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	460b      	mov	r3, r1
 8003d12:	4611      	mov	r1, r2
 8003d14:	4b38      	ldr	r3, [pc, #224]	@ (8003df8 <UART_SetConfig+0x4e4>)
 8003d16:	fba3 2301 	umull	r2, r3, r3, r1
 8003d1a:	095b      	lsrs	r3, r3, #5
 8003d1c:	2264      	movs	r2, #100	@ 0x64
 8003d1e:	fb02 f303 	mul.w	r3, r2, r3
 8003d22:	1acb      	subs	r3, r1, r3
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	3332      	adds	r3, #50	@ 0x32
 8003d28:	4a33      	ldr	r2, [pc, #204]	@ (8003df8 <UART_SetConfig+0x4e4>)
 8003d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2e:	095b      	lsrs	r3, r3, #5
 8003d30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d34:	441c      	add	r4, r3
 8003d36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d3e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d44:	4642      	mov	r2, r8
 8003d46:	464b      	mov	r3, r9
 8003d48:	1891      	adds	r1, r2, r2
 8003d4a:	60b9      	str	r1, [r7, #8]
 8003d4c:	415b      	adcs	r3, r3
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d54:	4641      	mov	r1, r8
 8003d56:	1851      	adds	r1, r2, r1
 8003d58:	6039      	str	r1, [r7, #0]
 8003d5a:	4649      	mov	r1, r9
 8003d5c:	414b      	adcs	r3, r1
 8003d5e:	607b      	str	r3, [r7, #4]
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	f04f 0300 	mov.w	r3, #0
 8003d68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d6c:	4659      	mov	r1, fp
 8003d6e:	00cb      	lsls	r3, r1, #3
 8003d70:	4651      	mov	r1, sl
 8003d72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d76:	4651      	mov	r1, sl
 8003d78:	00ca      	lsls	r2, r1, #3
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4603      	mov	r3, r0
 8003d80:	4642      	mov	r2, r8
 8003d82:	189b      	adds	r3, r3, r2
 8003d84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d86:	464b      	mov	r3, r9
 8003d88:	460a      	mov	r2, r1
 8003d8a:	eb42 0303 	adc.w	r3, r2, r3
 8003d8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d9a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003d9c:	f04f 0200 	mov.w	r2, #0
 8003da0:	f04f 0300 	mov.w	r3, #0
 8003da4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003da8:	4649      	mov	r1, r9
 8003daa:	008b      	lsls	r3, r1, #2
 8003dac:	4641      	mov	r1, r8
 8003dae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003db2:	4641      	mov	r1, r8
 8003db4:	008a      	lsls	r2, r1, #2
 8003db6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003dba:	f7fc fa81 	bl	80002c0 <__aeabi_uldivmod>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003df8 <UART_SetConfig+0x4e4>)
 8003dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8003dc8:	095b      	lsrs	r3, r3, #5
 8003dca:	2164      	movs	r1, #100	@ 0x64
 8003dcc:	fb01 f303 	mul.w	r3, r1, r3
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	3332      	adds	r3, #50	@ 0x32
 8003dd6:	4a08      	ldr	r2, [pc, #32]	@ (8003df8 <UART_SetConfig+0x4e4>)
 8003dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ddc:	095b      	lsrs	r3, r3, #5
 8003dde:	f003 020f 	and.w	r2, r3, #15
 8003de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4422      	add	r2, r4
 8003dea:	609a      	str	r2, [r3, #8]
}
 8003dec:	bf00      	nop
 8003dee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003df2:	46bd      	mov	sp, r7
 8003df4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003df8:	51eb851f 	.word	0x51eb851f

08003dfc <siprintf>:
 8003dfc:	b40e      	push	{r1, r2, r3}
 8003dfe:	b500      	push	{lr}
 8003e00:	b09c      	sub	sp, #112	@ 0x70
 8003e02:	ab1d      	add	r3, sp, #116	@ 0x74
 8003e04:	9002      	str	r0, [sp, #8]
 8003e06:	9006      	str	r0, [sp, #24]
 8003e08:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003e0c:	4809      	ldr	r0, [pc, #36]	@ (8003e34 <siprintf+0x38>)
 8003e0e:	9107      	str	r1, [sp, #28]
 8003e10:	9104      	str	r1, [sp, #16]
 8003e12:	4909      	ldr	r1, [pc, #36]	@ (8003e38 <siprintf+0x3c>)
 8003e14:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e18:	9105      	str	r1, [sp, #20]
 8003e1a:	6800      	ldr	r0, [r0, #0]
 8003e1c:	9301      	str	r3, [sp, #4]
 8003e1e:	a902      	add	r1, sp, #8
 8003e20:	f000 f89c 	bl	8003f5c <_svfiprintf_r>
 8003e24:	9b02      	ldr	r3, [sp, #8]
 8003e26:	2200      	movs	r2, #0
 8003e28:	701a      	strb	r2, [r3, #0]
 8003e2a:	b01c      	add	sp, #112	@ 0x70
 8003e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e30:	b003      	add	sp, #12
 8003e32:	4770      	bx	lr
 8003e34:	2000001c 	.word	0x2000001c
 8003e38:	ffff0208 	.word	0xffff0208

08003e3c <memset>:
 8003e3c:	4402      	add	r2, r0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d100      	bne.n	8003e46 <memset+0xa>
 8003e44:	4770      	bx	lr
 8003e46:	f803 1b01 	strb.w	r1, [r3], #1
 8003e4a:	e7f9      	b.n	8003e40 <memset+0x4>

08003e4c <__errno>:
 8003e4c:	4b01      	ldr	r3, [pc, #4]	@ (8003e54 <__errno+0x8>)
 8003e4e:	6818      	ldr	r0, [r3, #0]
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	2000001c 	.word	0x2000001c

08003e58 <__libc_init_array>:
 8003e58:	b570      	push	{r4, r5, r6, lr}
 8003e5a:	4d0d      	ldr	r5, [pc, #52]	@ (8003e90 <__libc_init_array+0x38>)
 8003e5c:	4c0d      	ldr	r4, [pc, #52]	@ (8003e94 <__libc_init_array+0x3c>)
 8003e5e:	1b64      	subs	r4, r4, r5
 8003e60:	10a4      	asrs	r4, r4, #2
 8003e62:	2600      	movs	r6, #0
 8003e64:	42a6      	cmp	r6, r4
 8003e66:	d109      	bne.n	8003e7c <__libc_init_array+0x24>
 8003e68:	4d0b      	ldr	r5, [pc, #44]	@ (8003e98 <__libc_init_array+0x40>)
 8003e6a:	4c0c      	ldr	r4, [pc, #48]	@ (8003e9c <__libc_init_array+0x44>)
 8003e6c:	f000 fc66 	bl	800473c <_init>
 8003e70:	1b64      	subs	r4, r4, r5
 8003e72:	10a4      	asrs	r4, r4, #2
 8003e74:	2600      	movs	r6, #0
 8003e76:	42a6      	cmp	r6, r4
 8003e78:	d105      	bne.n	8003e86 <__libc_init_array+0x2e>
 8003e7a:	bd70      	pop	{r4, r5, r6, pc}
 8003e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e80:	4798      	blx	r3
 8003e82:	3601      	adds	r6, #1
 8003e84:	e7ee      	b.n	8003e64 <__libc_init_array+0xc>
 8003e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e8a:	4798      	blx	r3
 8003e8c:	3601      	adds	r6, #1
 8003e8e:	e7f2      	b.n	8003e76 <__libc_init_array+0x1e>
 8003e90:	080047d8 	.word	0x080047d8
 8003e94:	080047d8 	.word	0x080047d8
 8003e98:	080047d8 	.word	0x080047d8
 8003e9c:	080047dc 	.word	0x080047dc

08003ea0 <__retarget_lock_acquire_recursive>:
 8003ea0:	4770      	bx	lr

08003ea2 <__retarget_lock_release_recursive>:
 8003ea2:	4770      	bx	lr

08003ea4 <__ssputs_r>:
 8003ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ea8:	688e      	ldr	r6, [r1, #8]
 8003eaa:	461f      	mov	r7, r3
 8003eac:	42be      	cmp	r6, r7
 8003eae:	680b      	ldr	r3, [r1, #0]
 8003eb0:	4682      	mov	sl, r0
 8003eb2:	460c      	mov	r4, r1
 8003eb4:	4690      	mov	r8, r2
 8003eb6:	d82d      	bhi.n	8003f14 <__ssputs_r+0x70>
 8003eb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003ebc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003ec0:	d026      	beq.n	8003f10 <__ssputs_r+0x6c>
 8003ec2:	6965      	ldr	r5, [r4, #20]
 8003ec4:	6909      	ldr	r1, [r1, #16]
 8003ec6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003eca:	eba3 0901 	sub.w	r9, r3, r1
 8003ece:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ed2:	1c7b      	adds	r3, r7, #1
 8003ed4:	444b      	add	r3, r9
 8003ed6:	106d      	asrs	r5, r5, #1
 8003ed8:	429d      	cmp	r5, r3
 8003eda:	bf38      	it	cc
 8003edc:	461d      	movcc	r5, r3
 8003ede:	0553      	lsls	r3, r2, #21
 8003ee0:	d527      	bpl.n	8003f32 <__ssputs_r+0x8e>
 8003ee2:	4629      	mov	r1, r5
 8003ee4:	f000 f958 	bl	8004198 <_malloc_r>
 8003ee8:	4606      	mov	r6, r0
 8003eea:	b360      	cbz	r0, 8003f46 <__ssputs_r+0xa2>
 8003eec:	6921      	ldr	r1, [r4, #16]
 8003eee:	464a      	mov	r2, r9
 8003ef0:	f000 fbc4 	bl	800467c <memcpy>
 8003ef4:	89a3      	ldrh	r3, [r4, #12]
 8003ef6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003efe:	81a3      	strh	r3, [r4, #12]
 8003f00:	6126      	str	r6, [r4, #16]
 8003f02:	6165      	str	r5, [r4, #20]
 8003f04:	444e      	add	r6, r9
 8003f06:	eba5 0509 	sub.w	r5, r5, r9
 8003f0a:	6026      	str	r6, [r4, #0]
 8003f0c:	60a5      	str	r5, [r4, #8]
 8003f0e:	463e      	mov	r6, r7
 8003f10:	42be      	cmp	r6, r7
 8003f12:	d900      	bls.n	8003f16 <__ssputs_r+0x72>
 8003f14:	463e      	mov	r6, r7
 8003f16:	6820      	ldr	r0, [r4, #0]
 8003f18:	4632      	mov	r2, r6
 8003f1a:	4641      	mov	r1, r8
 8003f1c:	f000 fb84 	bl	8004628 <memmove>
 8003f20:	68a3      	ldr	r3, [r4, #8]
 8003f22:	1b9b      	subs	r3, r3, r6
 8003f24:	60a3      	str	r3, [r4, #8]
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	4433      	add	r3, r6
 8003f2a:	6023      	str	r3, [r4, #0]
 8003f2c:	2000      	movs	r0, #0
 8003f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f32:	462a      	mov	r2, r5
 8003f34:	f000 fb4a 	bl	80045cc <_realloc_r>
 8003f38:	4606      	mov	r6, r0
 8003f3a:	2800      	cmp	r0, #0
 8003f3c:	d1e0      	bne.n	8003f00 <__ssputs_r+0x5c>
 8003f3e:	6921      	ldr	r1, [r4, #16]
 8003f40:	4650      	mov	r0, sl
 8003f42:	f000 fba9 	bl	8004698 <_free_r>
 8003f46:	230c      	movs	r3, #12
 8003f48:	f8ca 3000 	str.w	r3, [sl]
 8003f4c:	89a3      	ldrh	r3, [r4, #12]
 8003f4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f52:	81a3      	strh	r3, [r4, #12]
 8003f54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f58:	e7e9      	b.n	8003f2e <__ssputs_r+0x8a>
	...

08003f5c <_svfiprintf_r>:
 8003f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f60:	4698      	mov	r8, r3
 8003f62:	898b      	ldrh	r3, [r1, #12]
 8003f64:	061b      	lsls	r3, r3, #24
 8003f66:	b09d      	sub	sp, #116	@ 0x74
 8003f68:	4607      	mov	r7, r0
 8003f6a:	460d      	mov	r5, r1
 8003f6c:	4614      	mov	r4, r2
 8003f6e:	d510      	bpl.n	8003f92 <_svfiprintf_r+0x36>
 8003f70:	690b      	ldr	r3, [r1, #16]
 8003f72:	b973      	cbnz	r3, 8003f92 <_svfiprintf_r+0x36>
 8003f74:	2140      	movs	r1, #64	@ 0x40
 8003f76:	f000 f90f 	bl	8004198 <_malloc_r>
 8003f7a:	6028      	str	r0, [r5, #0]
 8003f7c:	6128      	str	r0, [r5, #16]
 8003f7e:	b930      	cbnz	r0, 8003f8e <_svfiprintf_r+0x32>
 8003f80:	230c      	movs	r3, #12
 8003f82:	603b      	str	r3, [r7, #0]
 8003f84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f88:	b01d      	add	sp, #116	@ 0x74
 8003f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f8e:	2340      	movs	r3, #64	@ 0x40
 8003f90:	616b      	str	r3, [r5, #20]
 8003f92:	2300      	movs	r3, #0
 8003f94:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f96:	2320      	movs	r3, #32
 8003f98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fa0:	2330      	movs	r3, #48	@ 0x30
 8003fa2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004140 <_svfiprintf_r+0x1e4>
 8003fa6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003faa:	f04f 0901 	mov.w	r9, #1
 8003fae:	4623      	mov	r3, r4
 8003fb0:	469a      	mov	sl, r3
 8003fb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fb6:	b10a      	cbz	r2, 8003fbc <_svfiprintf_r+0x60>
 8003fb8:	2a25      	cmp	r2, #37	@ 0x25
 8003fba:	d1f9      	bne.n	8003fb0 <_svfiprintf_r+0x54>
 8003fbc:	ebba 0b04 	subs.w	fp, sl, r4
 8003fc0:	d00b      	beq.n	8003fda <_svfiprintf_r+0x7e>
 8003fc2:	465b      	mov	r3, fp
 8003fc4:	4622      	mov	r2, r4
 8003fc6:	4629      	mov	r1, r5
 8003fc8:	4638      	mov	r0, r7
 8003fca:	f7ff ff6b 	bl	8003ea4 <__ssputs_r>
 8003fce:	3001      	adds	r0, #1
 8003fd0:	f000 80a7 	beq.w	8004122 <_svfiprintf_r+0x1c6>
 8003fd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003fd6:	445a      	add	r2, fp
 8003fd8:	9209      	str	r2, [sp, #36]	@ 0x24
 8003fda:	f89a 3000 	ldrb.w	r3, [sl]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 809f 	beq.w	8004122 <_svfiprintf_r+0x1c6>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003fea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fee:	f10a 0a01 	add.w	sl, sl, #1
 8003ff2:	9304      	str	r3, [sp, #16]
 8003ff4:	9307      	str	r3, [sp, #28]
 8003ff6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003ffa:	931a      	str	r3, [sp, #104]	@ 0x68
 8003ffc:	4654      	mov	r4, sl
 8003ffe:	2205      	movs	r2, #5
 8004000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004004:	484e      	ldr	r0, [pc, #312]	@ (8004140 <_svfiprintf_r+0x1e4>)
 8004006:	f7fc f90b 	bl	8000220 <memchr>
 800400a:	9a04      	ldr	r2, [sp, #16]
 800400c:	b9d8      	cbnz	r0, 8004046 <_svfiprintf_r+0xea>
 800400e:	06d0      	lsls	r0, r2, #27
 8004010:	bf44      	itt	mi
 8004012:	2320      	movmi	r3, #32
 8004014:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004018:	0711      	lsls	r1, r2, #28
 800401a:	bf44      	itt	mi
 800401c:	232b      	movmi	r3, #43	@ 0x2b
 800401e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004022:	f89a 3000 	ldrb.w	r3, [sl]
 8004026:	2b2a      	cmp	r3, #42	@ 0x2a
 8004028:	d015      	beq.n	8004056 <_svfiprintf_r+0xfa>
 800402a:	9a07      	ldr	r2, [sp, #28]
 800402c:	4654      	mov	r4, sl
 800402e:	2000      	movs	r0, #0
 8004030:	f04f 0c0a 	mov.w	ip, #10
 8004034:	4621      	mov	r1, r4
 8004036:	f811 3b01 	ldrb.w	r3, [r1], #1
 800403a:	3b30      	subs	r3, #48	@ 0x30
 800403c:	2b09      	cmp	r3, #9
 800403e:	d94b      	bls.n	80040d8 <_svfiprintf_r+0x17c>
 8004040:	b1b0      	cbz	r0, 8004070 <_svfiprintf_r+0x114>
 8004042:	9207      	str	r2, [sp, #28]
 8004044:	e014      	b.n	8004070 <_svfiprintf_r+0x114>
 8004046:	eba0 0308 	sub.w	r3, r0, r8
 800404a:	fa09 f303 	lsl.w	r3, r9, r3
 800404e:	4313      	orrs	r3, r2
 8004050:	9304      	str	r3, [sp, #16]
 8004052:	46a2      	mov	sl, r4
 8004054:	e7d2      	b.n	8003ffc <_svfiprintf_r+0xa0>
 8004056:	9b03      	ldr	r3, [sp, #12]
 8004058:	1d19      	adds	r1, r3, #4
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	9103      	str	r1, [sp, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	bfbb      	ittet	lt
 8004062:	425b      	neglt	r3, r3
 8004064:	f042 0202 	orrlt.w	r2, r2, #2
 8004068:	9307      	strge	r3, [sp, #28]
 800406a:	9307      	strlt	r3, [sp, #28]
 800406c:	bfb8      	it	lt
 800406e:	9204      	strlt	r2, [sp, #16]
 8004070:	7823      	ldrb	r3, [r4, #0]
 8004072:	2b2e      	cmp	r3, #46	@ 0x2e
 8004074:	d10a      	bne.n	800408c <_svfiprintf_r+0x130>
 8004076:	7863      	ldrb	r3, [r4, #1]
 8004078:	2b2a      	cmp	r3, #42	@ 0x2a
 800407a:	d132      	bne.n	80040e2 <_svfiprintf_r+0x186>
 800407c:	9b03      	ldr	r3, [sp, #12]
 800407e:	1d1a      	adds	r2, r3, #4
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	9203      	str	r2, [sp, #12]
 8004084:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004088:	3402      	adds	r4, #2
 800408a:	9305      	str	r3, [sp, #20]
 800408c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004150 <_svfiprintf_r+0x1f4>
 8004090:	7821      	ldrb	r1, [r4, #0]
 8004092:	2203      	movs	r2, #3
 8004094:	4650      	mov	r0, sl
 8004096:	f7fc f8c3 	bl	8000220 <memchr>
 800409a:	b138      	cbz	r0, 80040ac <_svfiprintf_r+0x150>
 800409c:	9b04      	ldr	r3, [sp, #16]
 800409e:	eba0 000a 	sub.w	r0, r0, sl
 80040a2:	2240      	movs	r2, #64	@ 0x40
 80040a4:	4082      	lsls	r2, r0
 80040a6:	4313      	orrs	r3, r2
 80040a8:	3401      	adds	r4, #1
 80040aa:	9304      	str	r3, [sp, #16]
 80040ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040b0:	4824      	ldr	r0, [pc, #144]	@ (8004144 <_svfiprintf_r+0x1e8>)
 80040b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80040b6:	2206      	movs	r2, #6
 80040b8:	f7fc f8b2 	bl	8000220 <memchr>
 80040bc:	2800      	cmp	r0, #0
 80040be:	d036      	beq.n	800412e <_svfiprintf_r+0x1d2>
 80040c0:	4b21      	ldr	r3, [pc, #132]	@ (8004148 <_svfiprintf_r+0x1ec>)
 80040c2:	bb1b      	cbnz	r3, 800410c <_svfiprintf_r+0x1b0>
 80040c4:	9b03      	ldr	r3, [sp, #12]
 80040c6:	3307      	adds	r3, #7
 80040c8:	f023 0307 	bic.w	r3, r3, #7
 80040cc:	3308      	adds	r3, #8
 80040ce:	9303      	str	r3, [sp, #12]
 80040d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040d2:	4433      	add	r3, r6
 80040d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80040d6:	e76a      	b.n	8003fae <_svfiprintf_r+0x52>
 80040d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80040dc:	460c      	mov	r4, r1
 80040de:	2001      	movs	r0, #1
 80040e0:	e7a8      	b.n	8004034 <_svfiprintf_r+0xd8>
 80040e2:	2300      	movs	r3, #0
 80040e4:	3401      	adds	r4, #1
 80040e6:	9305      	str	r3, [sp, #20]
 80040e8:	4619      	mov	r1, r3
 80040ea:	f04f 0c0a 	mov.w	ip, #10
 80040ee:	4620      	mov	r0, r4
 80040f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040f4:	3a30      	subs	r2, #48	@ 0x30
 80040f6:	2a09      	cmp	r2, #9
 80040f8:	d903      	bls.n	8004102 <_svfiprintf_r+0x1a6>
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0c6      	beq.n	800408c <_svfiprintf_r+0x130>
 80040fe:	9105      	str	r1, [sp, #20]
 8004100:	e7c4      	b.n	800408c <_svfiprintf_r+0x130>
 8004102:	fb0c 2101 	mla	r1, ip, r1, r2
 8004106:	4604      	mov	r4, r0
 8004108:	2301      	movs	r3, #1
 800410a:	e7f0      	b.n	80040ee <_svfiprintf_r+0x192>
 800410c:	ab03      	add	r3, sp, #12
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	462a      	mov	r2, r5
 8004112:	4b0e      	ldr	r3, [pc, #56]	@ (800414c <_svfiprintf_r+0x1f0>)
 8004114:	a904      	add	r1, sp, #16
 8004116:	4638      	mov	r0, r7
 8004118:	f3af 8000 	nop.w
 800411c:	1c42      	adds	r2, r0, #1
 800411e:	4606      	mov	r6, r0
 8004120:	d1d6      	bne.n	80040d0 <_svfiprintf_r+0x174>
 8004122:	89ab      	ldrh	r3, [r5, #12]
 8004124:	065b      	lsls	r3, r3, #25
 8004126:	f53f af2d 	bmi.w	8003f84 <_svfiprintf_r+0x28>
 800412a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800412c:	e72c      	b.n	8003f88 <_svfiprintf_r+0x2c>
 800412e:	ab03      	add	r3, sp, #12
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	462a      	mov	r2, r5
 8004134:	4b05      	ldr	r3, [pc, #20]	@ (800414c <_svfiprintf_r+0x1f0>)
 8004136:	a904      	add	r1, sp, #16
 8004138:	4638      	mov	r0, r7
 800413a:	f000 f91b 	bl	8004374 <_printf_i>
 800413e:	e7ed      	b.n	800411c <_svfiprintf_r+0x1c0>
 8004140:	0800479c 	.word	0x0800479c
 8004144:	080047a6 	.word	0x080047a6
 8004148:	00000000 	.word	0x00000000
 800414c:	08003ea5 	.word	0x08003ea5
 8004150:	080047a2 	.word	0x080047a2

08004154 <sbrk_aligned>:
 8004154:	b570      	push	{r4, r5, r6, lr}
 8004156:	4e0f      	ldr	r6, [pc, #60]	@ (8004194 <sbrk_aligned+0x40>)
 8004158:	460c      	mov	r4, r1
 800415a:	6831      	ldr	r1, [r6, #0]
 800415c:	4605      	mov	r5, r0
 800415e:	b911      	cbnz	r1, 8004166 <sbrk_aligned+0x12>
 8004160:	f000 fa7c 	bl	800465c <_sbrk_r>
 8004164:	6030      	str	r0, [r6, #0]
 8004166:	4621      	mov	r1, r4
 8004168:	4628      	mov	r0, r5
 800416a:	f000 fa77 	bl	800465c <_sbrk_r>
 800416e:	1c43      	adds	r3, r0, #1
 8004170:	d103      	bne.n	800417a <sbrk_aligned+0x26>
 8004172:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004176:	4620      	mov	r0, r4
 8004178:	bd70      	pop	{r4, r5, r6, pc}
 800417a:	1cc4      	adds	r4, r0, #3
 800417c:	f024 0403 	bic.w	r4, r4, #3
 8004180:	42a0      	cmp	r0, r4
 8004182:	d0f8      	beq.n	8004176 <sbrk_aligned+0x22>
 8004184:	1a21      	subs	r1, r4, r0
 8004186:	4628      	mov	r0, r5
 8004188:	f000 fa68 	bl	800465c <_sbrk_r>
 800418c:	3001      	adds	r0, #1
 800418e:	d1f2      	bne.n	8004176 <sbrk_aligned+0x22>
 8004190:	e7ef      	b.n	8004172 <sbrk_aligned+0x1e>
 8004192:	bf00      	nop
 8004194:	200002dc 	.word	0x200002dc

08004198 <_malloc_r>:
 8004198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800419c:	1ccd      	adds	r5, r1, #3
 800419e:	f025 0503 	bic.w	r5, r5, #3
 80041a2:	3508      	adds	r5, #8
 80041a4:	2d0c      	cmp	r5, #12
 80041a6:	bf38      	it	cc
 80041a8:	250c      	movcc	r5, #12
 80041aa:	2d00      	cmp	r5, #0
 80041ac:	4606      	mov	r6, r0
 80041ae:	db01      	blt.n	80041b4 <_malloc_r+0x1c>
 80041b0:	42a9      	cmp	r1, r5
 80041b2:	d904      	bls.n	80041be <_malloc_r+0x26>
 80041b4:	230c      	movs	r3, #12
 80041b6:	6033      	str	r3, [r6, #0]
 80041b8:	2000      	movs	r0, #0
 80041ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004294 <_malloc_r+0xfc>
 80041c2:	f000 f9f7 	bl	80045b4 <__malloc_lock>
 80041c6:	f8d8 3000 	ldr.w	r3, [r8]
 80041ca:	461c      	mov	r4, r3
 80041cc:	bb44      	cbnz	r4, 8004220 <_malloc_r+0x88>
 80041ce:	4629      	mov	r1, r5
 80041d0:	4630      	mov	r0, r6
 80041d2:	f7ff ffbf 	bl	8004154 <sbrk_aligned>
 80041d6:	1c43      	adds	r3, r0, #1
 80041d8:	4604      	mov	r4, r0
 80041da:	d158      	bne.n	800428e <_malloc_r+0xf6>
 80041dc:	f8d8 4000 	ldr.w	r4, [r8]
 80041e0:	4627      	mov	r7, r4
 80041e2:	2f00      	cmp	r7, #0
 80041e4:	d143      	bne.n	800426e <_malloc_r+0xd6>
 80041e6:	2c00      	cmp	r4, #0
 80041e8:	d04b      	beq.n	8004282 <_malloc_r+0xea>
 80041ea:	6823      	ldr	r3, [r4, #0]
 80041ec:	4639      	mov	r1, r7
 80041ee:	4630      	mov	r0, r6
 80041f0:	eb04 0903 	add.w	r9, r4, r3
 80041f4:	f000 fa32 	bl	800465c <_sbrk_r>
 80041f8:	4581      	cmp	r9, r0
 80041fa:	d142      	bne.n	8004282 <_malloc_r+0xea>
 80041fc:	6821      	ldr	r1, [r4, #0]
 80041fe:	1a6d      	subs	r5, r5, r1
 8004200:	4629      	mov	r1, r5
 8004202:	4630      	mov	r0, r6
 8004204:	f7ff ffa6 	bl	8004154 <sbrk_aligned>
 8004208:	3001      	adds	r0, #1
 800420a:	d03a      	beq.n	8004282 <_malloc_r+0xea>
 800420c:	6823      	ldr	r3, [r4, #0]
 800420e:	442b      	add	r3, r5
 8004210:	6023      	str	r3, [r4, #0]
 8004212:	f8d8 3000 	ldr.w	r3, [r8]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	bb62      	cbnz	r2, 8004274 <_malloc_r+0xdc>
 800421a:	f8c8 7000 	str.w	r7, [r8]
 800421e:	e00f      	b.n	8004240 <_malloc_r+0xa8>
 8004220:	6822      	ldr	r2, [r4, #0]
 8004222:	1b52      	subs	r2, r2, r5
 8004224:	d420      	bmi.n	8004268 <_malloc_r+0xd0>
 8004226:	2a0b      	cmp	r2, #11
 8004228:	d917      	bls.n	800425a <_malloc_r+0xc2>
 800422a:	1961      	adds	r1, r4, r5
 800422c:	42a3      	cmp	r3, r4
 800422e:	6025      	str	r5, [r4, #0]
 8004230:	bf18      	it	ne
 8004232:	6059      	strne	r1, [r3, #4]
 8004234:	6863      	ldr	r3, [r4, #4]
 8004236:	bf08      	it	eq
 8004238:	f8c8 1000 	streq.w	r1, [r8]
 800423c:	5162      	str	r2, [r4, r5]
 800423e:	604b      	str	r3, [r1, #4]
 8004240:	4630      	mov	r0, r6
 8004242:	f000 f9bd 	bl	80045c0 <__malloc_unlock>
 8004246:	f104 000b 	add.w	r0, r4, #11
 800424a:	1d23      	adds	r3, r4, #4
 800424c:	f020 0007 	bic.w	r0, r0, #7
 8004250:	1ac2      	subs	r2, r0, r3
 8004252:	bf1c      	itt	ne
 8004254:	1a1b      	subne	r3, r3, r0
 8004256:	50a3      	strne	r3, [r4, r2]
 8004258:	e7af      	b.n	80041ba <_malloc_r+0x22>
 800425a:	6862      	ldr	r2, [r4, #4]
 800425c:	42a3      	cmp	r3, r4
 800425e:	bf0c      	ite	eq
 8004260:	f8c8 2000 	streq.w	r2, [r8]
 8004264:	605a      	strne	r2, [r3, #4]
 8004266:	e7eb      	b.n	8004240 <_malloc_r+0xa8>
 8004268:	4623      	mov	r3, r4
 800426a:	6864      	ldr	r4, [r4, #4]
 800426c:	e7ae      	b.n	80041cc <_malloc_r+0x34>
 800426e:	463c      	mov	r4, r7
 8004270:	687f      	ldr	r7, [r7, #4]
 8004272:	e7b6      	b.n	80041e2 <_malloc_r+0x4a>
 8004274:	461a      	mov	r2, r3
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	42a3      	cmp	r3, r4
 800427a:	d1fb      	bne.n	8004274 <_malloc_r+0xdc>
 800427c:	2300      	movs	r3, #0
 800427e:	6053      	str	r3, [r2, #4]
 8004280:	e7de      	b.n	8004240 <_malloc_r+0xa8>
 8004282:	230c      	movs	r3, #12
 8004284:	6033      	str	r3, [r6, #0]
 8004286:	4630      	mov	r0, r6
 8004288:	f000 f99a 	bl	80045c0 <__malloc_unlock>
 800428c:	e794      	b.n	80041b8 <_malloc_r+0x20>
 800428e:	6005      	str	r5, [r0, #0]
 8004290:	e7d6      	b.n	8004240 <_malloc_r+0xa8>
 8004292:	bf00      	nop
 8004294:	200002e0 	.word	0x200002e0

08004298 <_printf_common>:
 8004298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800429c:	4616      	mov	r6, r2
 800429e:	4698      	mov	r8, r3
 80042a0:	688a      	ldr	r2, [r1, #8]
 80042a2:	690b      	ldr	r3, [r1, #16]
 80042a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80042a8:	4293      	cmp	r3, r2
 80042aa:	bfb8      	it	lt
 80042ac:	4613      	movlt	r3, r2
 80042ae:	6033      	str	r3, [r6, #0]
 80042b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80042b4:	4607      	mov	r7, r0
 80042b6:	460c      	mov	r4, r1
 80042b8:	b10a      	cbz	r2, 80042be <_printf_common+0x26>
 80042ba:	3301      	adds	r3, #1
 80042bc:	6033      	str	r3, [r6, #0]
 80042be:	6823      	ldr	r3, [r4, #0]
 80042c0:	0699      	lsls	r1, r3, #26
 80042c2:	bf42      	ittt	mi
 80042c4:	6833      	ldrmi	r3, [r6, #0]
 80042c6:	3302      	addmi	r3, #2
 80042c8:	6033      	strmi	r3, [r6, #0]
 80042ca:	6825      	ldr	r5, [r4, #0]
 80042cc:	f015 0506 	ands.w	r5, r5, #6
 80042d0:	d106      	bne.n	80042e0 <_printf_common+0x48>
 80042d2:	f104 0a19 	add.w	sl, r4, #25
 80042d6:	68e3      	ldr	r3, [r4, #12]
 80042d8:	6832      	ldr	r2, [r6, #0]
 80042da:	1a9b      	subs	r3, r3, r2
 80042dc:	42ab      	cmp	r3, r5
 80042de:	dc26      	bgt.n	800432e <_printf_common+0x96>
 80042e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80042e4:	6822      	ldr	r2, [r4, #0]
 80042e6:	3b00      	subs	r3, #0
 80042e8:	bf18      	it	ne
 80042ea:	2301      	movne	r3, #1
 80042ec:	0692      	lsls	r2, r2, #26
 80042ee:	d42b      	bmi.n	8004348 <_printf_common+0xb0>
 80042f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80042f4:	4641      	mov	r1, r8
 80042f6:	4638      	mov	r0, r7
 80042f8:	47c8      	blx	r9
 80042fa:	3001      	adds	r0, #1
 80042fc:	d01e      	beq.n	800433c <_printf_common+0xa4>
 80042fe:	6823      	ldr	r3, [r4, #0]
 8004300:	6922      	ldr	r2, [r4, #16]
 8004302:	f003 0306 	and.w	r3, r3, #6
 8004306:	2b04      	cmp	r3, #4
 8004308:	bf02      	ittt	eq
 800430a:	68e5      	ldreq	r5, [r4, #12]
 800430c:	6833      	ldreq	r3, [r6, #0]
 800430e:	1aed      	subeq	r5, r5, r3
 8004310:	68a3      	ldr	r3, [r4, #8]
 8004312:	bf0c      	ite	eq
 8004314:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004318:	2500      	movne	r5, #0
 800431a:	4293      	cmp	r3, r2
 800431c:	bfc4      	itt	gt
 800431e:	1a9b      	subgt	r3, r3, r2
 8004320:	18ed      	addgt	r5, r5, r3
 8004322:	2600      	movs	r6, #0
 8004324:	341a      	adds	r4, #26
 8004326:	42b5      	cmp	r5, r6
 8004328:	d11a      	bne.n	8004360 <_printf_common+0xc8>
 800432a:	2000      	movs	r0, #0
 800432c:	e008      	b.n	8004340 <_printf_common+0xa8>
 800432e:	2301      	movs	r3, #1
 8004330:	4652      	mov	r2, sl
 8004332:	4641      	mov	r1, r8
 8004334:	4638      	mov	r0, r7
 8004336:	47c8      	blx	r9
 8004338:	3001      	adds	r0, #1
 800433a:	d103      	bne.n	8004344 <_printf_common+0xac>
 800433c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004344:	3501      	adds	r5, #1
 8004346:	e7c6      	b.n	80042d6 <_printf_common+0x3e>
 8004348:	18e1      	adds	r1, r4, r3
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	2030      	movs	r0, #48	@ 0x30
 800434e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004352:	4422      	add	r2, r4
 8004354:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004358:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800435c:	3302      	adds	r3, #2
 800435e:	e7c7      	b.n	80042f0 <_printf_common+0x58>
 8004360:	2301      	movs	r3, #1
 8004362:	4622      	mov	r2, r4
 8004364:	4641      	mov	r1, r8
 8004366:	4638      	mov	r0, r7
 8004368:	47c8      	blx	r9
 800436a:	3001      	adds	r0, #1
 800436c:	d0e6      	beq.n	800433c <_printf_common+0xa4>
 800436e:	3601      	adds	r6, #1
 8004370:	e7d9      	b.n	8004326 <_printf_common+0x8e>
	...

08004374 <_printf_i>:
 8004374:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004378:	7e0f      	ldrb	r7, [r1, #24]
 800437a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800437c:	2f78      	cmp	r7, #120	@ 0x78
 800437e:	4691      	mov	r9, r2
 8004380:	4680      	mov	r8, r0
 8004382:	460c      	mov	r4, r1
 8004384:	469a      	mov	sl, r3
 8004386:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800438a:	d807      	bhi.n	800439c <_printf_i+0x28>
 800438c:	2f62      	cmp	r7, #98	@ 0x62
 800438e:	d80a      	bhi.n	80043a6 <_printf_i+0x32>
 8004390:	2f00      	cmp	r7, #0
 8004392:	f000 80d2 	beq.w	800453a <_printf_i+0x1c6>
 8004396:	2f58      	cmp	r7, #88	@ 0x58
 8004398:	f000 80b9 	beq.w	800450e <_printf_i+0x19a>
 800439c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80043a4:	e03a      	b.n	800441c <_printf_i+0xa8>
 80043a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80043aa:	2b15      	cmp	r3, #21
 80043ac:	d8f6      	bhi.n	800439c <_printf_i+0x28>
 80043ae:	a101      	add	r1, pc, #4	@ (adr r1, 80043b4 <_printf_i+0x40>)
 80043b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043b4:	0800440d 	.word	0x0800440d
 80043b8:	08004421 	.word	0x08004421
 80043bc:	0800439d 	.word	0x0800439d
 80043c0:	0800439d 	.word	0x0800439d
 80043c4:	0800439d 	.word	0x0800439d
 80043c8:	0800439d 	.word	0x0800439d
 80043cc:	08004421 	.word	0x08004421
 80043d0:	0800439d 	.word	0x0800439d
 80043d4:	0800439d 	.word	0x0800439d
 80043d8:	0800439d 	.word	0x0800439d
 80043dc:	0800439d 	.word	0x0800439d
 80043e0:	08004521 	.word	0x08004521
 80043e4:	0800444b 	.word	0x0800444b
 80043e8:	080044db 	.word	0x080044db
 80043ec:	0800439d 	.word	0x0800439d
 80043f0:	0800439d 	.word	0x0800439d
 80043f4:	08004543 	.word	0x08004543
 80043f8:	0800439d 	.word	0x0800439d
 80043fc:	0800444b 	.word	0x0800444b
 8004400:	0800439d 	.word	0x0800439d
 8004404:	0800439d 	.word	0x0800439d
 8004408:	080044e3 	.word	0x080044e3
 800440c:	6833      	ldr	r3, [r6, #0]
 800440e:	1d1a      	adds	r2, r3, #4
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6032      	str	r2, [r6, #0]
 8004414:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004418:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800441c:	2301      	movs	r3, #1
 800441e:	e09d      	b.n	800455c <_printf_i+0x1e8>
 8004420:	6833      	ldr	r3, [r6, #0]
 8004422:	6820      	ldr	r0, [r4, #0]
 8004424:	1d19      	adds	r1, r3, #4
 8004426:	6031      	str	r1, [r6, #0]
 8004428:	0606      	lsls	r6, r0, #24
 800442a:	d501      	bpl.n	8004430 <_printf_i+0xbc>
 800442c:	681d      	ldr	r5, [r3, #0]
 800442e:	e003      	b.n	8004438 <_printf_i+0xc4>
 8004430:	0645      	lsls	r5, r0, #25
 8004432:	d5fb      	bpl.n	800442c <_printf_i+0xb8>
 8004434:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004438:	2d00      	cmp	r5, #0
 800443a:	da03      	bge.n	8004444 <_printf_i+0xd0>
 800443c:	232d      	movs	r3, #45	@ 0x2d
 800443e:	426d      	negs	r5, r5
 8004440:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004444:	4859      	ldr	r0, [pc, #356]	@ (80045ac <_printf_i+0x238>)
 8004446:	230a      	movs	r3, #10
 8004448:	e011      	b.n	800446e <_printf_i+0xfa>
 800444a:	6821      	ldr	r1, [r4, #0]
 800444c:	6833      	ldr	r3, [r6, #0]
 800444e:	0608      	lsls	r0, r1, #24
 8004450:	f853 5b04 	ldr.w	r5, [r3], #4
 8004454:	d402      	bmi.n	800445c <_printf_i+0xe8>
 8004456:	0649      	lsls	r1, r1, #25
 8004458:	bf48      	it	mi
 800445a:	b2ad      	uxthmi	r5, r5
 800445c:	2f6f      	cmp	r7, #111	@ 0x6f
 800445e:	4853      	ldr	r0, [pc, #332]	@ (80045ac <_printf_i+0x238>)
 8004460:	6033      	str	r3, [r6, #0]
 8004462:	bf14      	ite	ne
 8004464:	230a      	movne	r3, #10
 8004466:	2308      	moveq	r3, #8
 8004468:	2100      	movs	r1, #0
 800446a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800446e:	6866      	ldr	r6, [r4, #4]
 8004470:	60a6      	str	r6, [r4, #8]
 8004472:	2e00      	cmp	r6, #0
 8004474:	bfa2      	ittt	ge
 8004476:	6821      	ldrge	r1, [r4, #0]
 8004478:	f021 0104 	bicge.w	r1, r1, #4
 800447c:	6021      	strge	r1, [r4, #0]
 800447e:	b90d      	cbnz	r5, 8004484 <_printf_i+0x110>
 8004480:	2e00      	cmp	r6, #0
 8004482:	d04b      	beq.n	800451c <_printf_i+0x1a8>
 8004484:	4616      	mov	r6, r2
 8004486:	fbb5 f1f3 	udiv	r1, r5, r3
 800448a:	fb03 5711 	mls	r7, r3, r1, r5
 800448e:	5dc7      	ldrb	r7, [r0, r7]
 8004490:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004494:	462f      	mov	r7, r5
 8004496:	42bb      	cmp	r3, r7
 8004498:	460d      	mov	r5, r1
 800449a:	d9f4      	bls.n	8004486 <_printf_i+0x112>
 800449c:	2b08      	cmp	r3, #8
 800449e:	d10b      	bne.n	80044b8 <_printf_i+0x144>
 80044a0:	6823      	ldr	r3, [r4, #0]
 80044a2:	07df      	lsls	r7, r3, #31
 80044a4:	d508      	bpl.n	80044b8 <_printf_i+0x144>
 80044a6:	6923      	ldr	r3, [r4, #16]
 80044a8:	6861      	ldr	r1, [r4, #4]
 80044aa:	4299      	cmp	r1, r3
 80044ac:	bfde      	ittt	le
 80044ae:	2330      	movle	r3, #48	@ 0x30
 80044b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80044b4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80044b8:	1b92      	subs	r2, r2, r6
 80044ba:	6122      	str	r2, [r4, #16]
 80044bc:	f8cd a000 	str.w	sl, [sp]
 80044c0:	464b      	mov	r3, r9
 80044c2:	aa03      	add	r2, sp, #12
 80044c4:	4621      	mov	r1, r4
 80044c6:	4640      	mov	r0, r8
 80044c8:	f7ff fee6 	bl	8004298 <_printf_common>
 80044cc:	3001      	adds	r0, #1
 80044ce:	d14a      	bne.n	8004566 <_printf_i+0x1f2>
 80044d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80044d4:	b004      	add	sp, #16
 80044d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	f043 0320 	orr.w	r3, r3, #32
 80044e0:	6023      	str	r3, [r4, #0]
 80044e2:	4833      	ldr	r0, [pc, #204]	@ (80045b0 <_printf_i+0x23c>)
 80044e4:	2778      	movs	r7, #120	@ 0x78
 80044e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80044ea:	6823      	ldr	r3, [r4, #0]
 80044ec:	6831      	ldr	r1, [r6, #0]
 80044ee:	061f      	lsls	r7, r3, #24
 80044f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80044f4:	d402      	bmi.n	80044fc <_printf_i+0x188>
 80044f6:	065f      	lsls	r7, r3, #25
 80044f8:	bf48      	it	mi
 80044fa:	b2ad      	uxthmi	r5, r5
 80044fc:	6031      	str	r1, [r6, #0]
 80044fe:	07d9      	lsls	r1, r3, #31
 8004500:	bf44      	itt	mi
 8004502:	f043 0320 	orrmi.w	r3, r3, #32
 8004506:	6023      	strmi	r3, [r4, #0]
 8004508:	b11d      	cbz	r5, 8004512 <_printf_i+0x19e>
 800450a:	2310      	movs	r3, #16
 800450c:	e7ac      	b.n	8004468 <_printf_i+0xf4>
 800450e:	4827      	ldr	r0, [pc, #156]	@ (80045ac <_printf_i+0x238>)
 8004510:	e7e9      	b.n	80044e6 <_printf_i+0x172>
 8004512:	6823      	ldr	r3, [r4, #0]
 8004514:	f023 0320 	bic.w	r3, r3, #32
 8004518:	6023      	str	r3, [r4, #0]
 800451a:	e7f6      	b.n	800450a <_printf_i+0x196>
 800451c:	4616      	mov	r6, r2
 800451e:	e7bd      	b.n	800449c <_printf_i+0x128>
 8004520:	6833      	ldr	r3, [r6, #0]
 8004522:	6825      	ldr	r5, [r4, #0]
 8004524:	6961      	ldr	r1, [r4, #20]
 8004526:	1d18      	adds	r0, r3, #4
 8004528:	6030      	str	r0, [r6, #0]
 800452a:	062e      	lsls	r6, r5, #24
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	d501      	bpl.n	8004534 <_printf_i+0x1c0>
 8004530:	6019      	str	r1, [r3, #0]
 8004532:	e002      	b.n	800453a <_printf_i+0x1c6>
 8004534:	0668      	lsls	r0, r5, #25
 8004536:	d5fb      	bpl.n	8004530 <_printf_i+0x1bc>
 8004538:	8019      	strh	r1, [r3, #0]
 800453a:	2300      	movs	r3, #0
 800453c:	6123      	str	r3, [r4, #16]
 800453e:	4616      	mov	r6, r2
 8004540:	e7bc      	b.n	80044bc <_printf_i+0x148>
 8004542:	6833      	ldr	r3, [r6, #0]
 8004544:	1d1a      	adds	r2, r3, #4
 8004546:	6032      	str	r2, [r6, #0]
 8004548:	681e      	ldr	r6, [r3, #0]
 800454a:	6862      	ldr	r2, [r4, #4]
 800454c:	2100      	movs	r1, #0
 800454e:	4630      	mov	r0, r6
 8004550:	f7fb fe66 	bl	8000220 <memchr>
 8004554:	b108      	cbz	r0, 800455a <_printf_i+0x1e6>
 8004556:	1b80      	subs	r0, r0, r6
 8004558:	6060      	str	r0, [r4, #4]
 800455a:	6863      	ldr	r3, [r4, #4]
 800455c:	6123      	str	r3, [r4, #16]
 800455e:	2300      	movs	r3, #0
 8004560:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004564:	e7aa      	b.n	80044bc <_printf_i+0x148>
 8004566:	6923      	ldr	r3, [r4, #16]
 8004568:	4632      	mov	r2, r6
 800456a:	4649      	mov	r1, r9
 800456c:	4640      	mov	r0, r8
 800456e:	47d0      	blx	sl
 8004570:	3001      	adds	r0, #1
 8004572:	d0ad      	beq.n	80044d0 <_printf_i+0x15c>
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	079b      	lsls	r3, r3, #30
 8004578:	d413      	bmi.n	80045a2 <_printf_i+0x22e>
 800457a:	68e0      	ldr	r0, [r4, #12]
 800457c:	9b03      	ldr	r3, [sp, #12]
 800457e:	4298      	cmp	r0, r3
 8004580:	bfb8      	it	lt
 8004582:	4618      	movlt	r0, r3
 8004584:	e7a6      	b.n	80044d4 <_printf_i+0x160>
 8004586:	2301      	movs	r3, #1
 8004588:	4632      	mov	r2, r6
 800458a:	4649      	mov	r1, r9
 800458c:	4640      	mov	r0, r8
 800458e:	47d0      	blx	sl
 8004590:	3001      	adds	r0, #1
 8004592:	d09d      	beq.n	80044d0 <_printf_i+0x15c>
 8004594:	3501      	adds	r5, #1
 8004596:	68e3      	ldr	r3, [r4, #12]
 8004598:	9903      	ldr	r1, [sp, #12]
 800459a:	1a5b      	subs	r3, r3, r1
 800459c:	42ab      	cmp	r3, r5
 800459e:	dcf2      	bgt.n	8004586 <_printf_i+0x212>
 80045a0:	e7eb      	b.n	800457a <_printf_i+0x206>
 80045a2:	2500      	movs	r5, #0
 80045a4:	f104 0619 	add.w	r6, r4, #25
 80045a8:	e7f5      	b.n	8004596 <_printf_i+0x222>
 80045aa:	bf00      	nop
 80045ac:	080047ad 	.word	0x080047ad
 80045b0:	080047be 	.word	0x080047be

080045b4 <__malloc_lock>:
 80045b4:	4801      	ldr	r0, [pc, #4]	@ (80045bc <__malloc_lock+0x8>)
 80045b6:	f7ff bc73 	b.w	8003ea0 <__retarget_lock_acquire_recursive>
 80045ba:	bf00      	nop
 80045bc:	200002d8 	.word	0x200002d8

080045c0 <__malloc_unlock>:
 80045c0:	4801      	ldr	r0, [pc, #4]	@ (80045c8 <__malloc_unlock+0x8>)
 80045c2:	f7ff bc6e 	b.w	8003ea2 <__retarget_lock_release_recursive>
 80045c6:	bf00      	nop
 80045c8:	200002d8 	.word	0x200002d8

080045cc <_realloc_r>:
 80045cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045d0:	4680      	mov	r8, r0
 80045d2:	4615      	mov	r5, r2
 80045d4:	460c      	mov	r4, r1
 80045d6:	b921      	cbnz	r1, 80045e2 <_realloc_r+0x16>
 80045d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045dc:	4611      	mov	r1, r2
 80045de:	f7ff bddb 	b.w	8004198 <_malloc_r>
 80045e2:	b92a      	cbnz	r2, 80045f0 <_realloc_r+0x24>
 80045e4:	f000 f858 	bl	8004698 <_free_r>
 80045e8:	2400      	movs	r4, #0
 80045ea:	4620      	mov	r0, r4
 80045ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045f0:	f000 f89c 	bl	800472c <_malloc_usable_size_r>
 80045f4:	4285      	cmp	r5, r0
 80045f6:	4606      	mov	r6, r0
 80045f8:	d802      	bhi.n	8004600 <_realloc_r+0x34>
 80045fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80045fe:	d8f4      	bhi.n	80045ea <_realloc_r+0x1e>
 8004600:	4629      	mov	r1, r5
 8004602:	4640      	mov	r0, r8
 8004604:	f7ff fdc8 	bl	8004198 <_malloc_r>
 8004608:	4607      	mov	r7, r0
 800460a:	2800      	cmp	r0, #0
 800460c:	d0ec      	beq.n	80045e8 <_realloc_r+0x1c>
 800460e:	42b5      	cmp	r5, r6
 8004610:	462a      	mov	r2, r5
 8004612:	4621      	mov	r1, r4
 8004614:	bf28      	it	cs
 8004616:	4632      	movcs	r2, r6
 8004618:	f000 f830 	bl	800467c <memcpy>
 800461c:	4621      	mov	r1, r4
 800461e:	4640      	mov	r0, r8
 8004620:	f000 f83a 	bl	8004698 <_free_r>
 8004624:	463c      	mov	r4, r7
 8004626:	e7e0      	b.n	80045ea <_realloc_r+0x1e>

08004628 <memmove>:
 8004628:	4288      	cmp	r0, r1
 800462a:	b510      	push	{r4, lr}
 800462c:	eb01 0402 	add.w	r4, r1, r2
 8004630:	d902      	bls.n	8004638 <memmove+0x10>
 8004632:	4284      	cmp	r4, r0
 8004634:	4623      	mov	r3, r4
 8004636:	d807      	bhi.n	8004648 <memmove+0x20>
 8004638:	1e43      	subs	r3, r0, #1
 800463a:	42a1      	cmp	r1, r4
 800463c:	d008      	beq.n	8004650 <memmove+0x28>
 800463e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004642:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004646:	e7f8      	b.n	800463a <memmove+0x12>
 8004648:	4402      	add	r2, r0
 800464a:	4601      	mov	r1, r0
 800464c:	428a      	cmp	r2, r1
 800464e:	d100      	bne.n	8004652 <memmove+0x2a>
 8004650:	bd10      	pop	{r4, pc}
 8004652:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004656:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800465a:	e7f7      	b.n	800464c <memmove+0x24>

0800465c <_sbrk_r>:
 800465c:	b538      	push	{r3, r4, r5, lr}
 800465e:	4d06      	ldr	r5, [pc, #24]	@ (8004678 <_sbrk_r+0x1c>)
 8004660:	2300      	movs	r3, #0
 8004662:	4604      	mov	r4, r0
 8004664:	4608      	mov	r0, r1
 8004666:	602b      	str	r3, [r5, #0]
 8004668:	f7fc fe3e 	bl	80012e8 <_sbrk>
 800466c:	1c43      	adds	r3, r0, #1
 800466e:	d102      	bne.n	8004676 <_sbrk_r+0x1a>
 8004670:	682b      	ldr	r3, [r5, #0]
 8004672:	b103      	cbz	r3, 8004676 <_sbrk_r+0x1a>
 8004674:	6023      	str	r3, [r4, #0]
 8004676:	bd38      	pop	{r3, r4, r5, pc}
 8004678:	200002e4 	.word	0x200002e4

0800467c <memcpy>:
 800467c:	440a      	add	r2, r1
 800467e:	4291      	cmp	r1, r2
 8004680:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004684:	d100      	bne.n	8004688 <memcpy+0xc>
 8004686:	4770      	bx	lr
 8004688:	b510      	push	{r4, lr}
 800468a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800468e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004692:	4291      	cmp	r1, r2
 8004694:	d1f9      	bne.n	800468a <memcpy+0xe>
 8004696:	bd10      	pop	{r4, pc}

08004698 <_free_r>:
 8004698:	b538      	push	{r3, r4, r5, lr}
 800469a:	4605      	mov	r5, r0
 800469c:	2900      	cmp	r1, #0
 800469e:	d041      	beq.n	8004724 <_free_r+0x8c>
 80046a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046a4:	1f0c      	subs	r4, r1, #4
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	bfb8      	it	lt
 80046aa:	18e4      	addlt	r4, r4, r3
 80046ac:	f7ff ff82 	bl	80045b4 <__malloc_lock>
 80046b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004728 <_free_r+0x90>)
 80046b2:	6813      	ldr	r3, [r2, #0]
 80046b4:	b933      	cbnz	r3, 80046c4 <_free_r+0x2c>
 80046b6:	6063      	str	r3, [r4, #4]
 80046b8:	6014      	str	r4, [r2, #0]
 80046ba:	4628      	mov	r0, r5
 80046bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046c0:	f7ff bf7e 	b.w	80045c0 <__malloc_unlock>
 80046c4:	42a3      	cmp	r3, r4
 80046c6:	d908      	bls.n	80046da <_free_r+0x42>
 80046c8:	6820      	ldr	r0, [r4, #0]
 80046ca:	1821      	adds	r1, r4, r0
 80046cc:	428b      	cmp	r3, r1
 80046ce:	bf01      	itttt	eq
 80046d0:	6819      	ldreq	r1, [r3, #0]
 80046d2:	685b      	ldreq	r3, [r3, #4]
 80046d4:	1809      	addeq	r1, r1, r0
 80046d6:	6021      	streq	r1, [r4, #0]
 80046d8:	e7ed      	b.n	80046b6 <_free_r+0x1e>
 80046da:	461a      	mov	r2, r3
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	b10b      	cbz	r3, 80046e4 <_free_r+0x4c>
 80046e0:	42a3      	cmp	r3, r4
 80046e2:	d9fa      	bls.n	80046da <_free_r+0x42>
 80046e4:	6811      	ldr	r1, [r2, #0]
 80046e6:	1850      	adds	r0, r2, r1
 80046e8:	42a0      	cmp	r0, r4
 80046ea:	d10b      	bne.n	8004704 <_free_r+0x6c>
 80046ec:	6820      	ldr	r0, [r4, #0]
 80046ee:	4401      	add	r1, r0
 80046f0:	1850      	adds	r0, r2, r1
 80046f2:	4283      	cmp	r3, r0
 80046f4:	6011      	str	r1, [r2, #0]
 80046f6:	d1e0      	bne.n	80046ba <_free_r+0x22>
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	6053      	str	r3, [r2, #4]
 80046fe:	4408      	add	r0, r1
 8004700:	6010      	str	r0, [r2, #0]
 8004702:	e7da      	b.n	80046ba <_free_r+0x22>
 8004704:	d902      	bls.n	800470c <_free_r+0x74>
 8004706:	230c      	movs	r3, #12
 8004708:	602b      	str	r3, [r5, #0]
 800470a:	e7d6      	b.n	80046ba <_free_r+0x22>
 800470c:	6820      	ldr	r0, [r4, #0]
 800470e:	1821      	adds	r1, r4, r0
 8004710:	428b      	cmp	r3, r1
 8004712:	bf04      	itt	eq
 8004714:	6819      	ldreq	r1, [r3, #0]
 8004716:	685b      	ldreq	r3, [r3, #4]
 8004718:	6063      	str	r3, [r4, #4]
 800471a:	bf04      	itt	eq
 800471c:	1809      	addeq	r1, r1, r0
 800471e:	6021      	streq	r1, [r4, #0]
 8004720:	6054      	str	r4, [r2, #4]
 8004722:	e7ca      	b.n	80046ba <_free_r+0x22>
 8004724:	bd38      	pop	{r3, r4, r5, pc}
 8004726:	bf00      	nop
 8004728:	200002e0 	.word	0x200002e0

0800472c <_malloc_usable_size_r>:
 800472c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004730:	1f18      	subs	r0, r3, #4
 8004732:	2b00      	cmp	r3, #0
 8004734:	bfbc      	itt	lt
 8004736:	580b      	ldrlt	r3, [r1, r0]
 8004738:	18c0      	addlt	r0, r0, r3
 800473a:	4770      	bx	lr

0800473c <_init>:
 800473c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473e:	bf00      	nop
 8004740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004742:	bc08      	pop	{r3}
 8004744:	469e      	mov	lr, r3
 8004746:	4770      	bx	lr

08004748 <_fini>:
 8004748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474a:	bf00      	nop
 800474c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800474e:	bc08      	pop	{r3}
 8004750:	469e      	mov	lr, r3
 8004752:	4770      	bx	lr
